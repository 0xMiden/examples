{
    "/masm": {
        "name": "masm",
        "type": "dir",
        "path": "/masm",
        "content": ""
    },
    "/inputs": {
        "name": "inputs",
        "type": "dir",
        "path": "/inputs",
        "content": ""
    },
    "/masm/advice_provider": {
        "name": "advice_provider",
        "type": "masm",
        "path": "/masm/advice_provider",
        "content": "# A simple example that illustrates how to define advice provider inputs and access them using \r\n# miden assembly. Please see the associated `advice_provider.inputs` file for the definition of\r\n# the advice provider inputs. \r\nbegin\r\n    # assert we have \"1\" on the stack to start\r\n    push.1 assert_eq\r\n\r\n    # load a word from the advice stack\r\n    adv_loadw\r\n\r\n    # assert the word is what we would expect\r\n    push.1.2.3.4 assert_eqw\r\n\r\n    # push the key for the advice map onto the stack (\"0000000000000000000000000000000000000000000000000000000000000000\")\r\n    push.0.0.0.0 \r\n\r\n    # load the values associated with the key from the advice map onto the advice stack\r\n    adv.push_mapval \r\n\r\n    # load the word from the advice stack\r\n    padw adv_loadw\r\n\r\n    # assert the word is what we would expect \r\n    push.5.6.7.8 assert_eqw\r\n\r\n    # clear key\r\n    dropw\r\n\r\n    # push the key for the advice map onto the stack (\"0000001000000000000000000000000000000000000000000000000000000000\")\r\n    push.268435456.0.0.0 \r\n\r\n    # load the values associated with the key from the advice map onto the advice stack\r\n    adv.push_mapval \r\n\r\n    # load the word from the advice stack\r\n    padw adv_loadw \r\n\r\n    # assert the word is what we would expect \r\n    push.9.10.11.12 assert_eqw\r\n\r\n    # clear key\r\n    dropw\r\n\r\n    # push the root of the merkle tree onto the stack \r\n    push.18185978518863914335.936586966360019113.497299419609993926.1977881506773614749\r\n\r\n    # define the element we want to access (index: 0, depth: 2)\r\n    push.0.2\r\n\r\n    # fetch the leaf\r\n    mtree_get\r\n\r\n    # assert the word is what we would expect (ZERO)\r\n    padw assert_eqw\r\n\r\n    # drop the root\r\n    dropw\r\n\r\n    # push the root of the sparse merkle tree onto the stack\r\n    push.3065709585824830918.11536776394119099527.7500493345072598939.14293758615514107993\r\n\r\n    # define the element we want to access (index:1, depth: 63)\r\n    push.1.63\r\n\r\n    # fetch the leaf\r\n    mtree_get\r\n\r\n    # assert the word is what we would expect (\"0000000000000000000000000000000333000000000000000000000000000000\")\r\n    push.0.216172782113783808.51.0 assert_eqw\r\n\r\n    # drop the root\r\n    dropw\r\n\r\n    push.0.0.0.1 adv.push_mapval padw adv_loadw\r\nend\r\n"
    },
    "/masm/catalan": {
        "name": "catalan",
        "type": "masm",
        "path": "/masm/catalan",
        "content": "#! Computes the nth Catalan number using dynamic programming.\r\n#! (See https://www.geeksforgeeks.org/program-nth-catalan-number/)\r\n#! \r\n#! Definition:\r\n#!     C_0 = 1\r\n#!     C_(n+1) = C_0 * C_n + C_1 * C_(n-1) + ... + C_n * C_0\r\n#!             =  2 * C_0 * C_n + 2 * C_1 * C_(n-1) + ... + 2 * C_(n/2) * C_(n/2+1) (if n+1 is even)\r\n#!             or 2 * C_0 * C_n + 2 * C_1 * C_(n-1) + ... + C_(n/2)^2               (if n+1 is odd)\r\n#! \r\n#! Input: The stack should contain a single element n.\r\n#! Output: A stack with a single element which is the nth Catalan number C_n.\r\n#! \r\n#! C_i for 0 <= i <= n will be stored in memory at address i.\r\n#! \r\n#! example:\r\n#! \r\n#! input:\r\n#! [9]\r\n#! \r\n#! output:\r\n#! [4862]\r\n\r\n#! Check if the counter is less than the maximum\r\nproc.check_continue_neq\r\n    # [i, max]\r\n    dup.1\r\n    dup.1\r\n    neq\r\n    # [ i != max , i, max ]\r\nend\r\n\r\n#! Fetch precomputed C_j and C_(i-j), and multiply them\r\nproc.fetch_and_multiply\r\n    # stack : [ i, j, ... ], mem : [ C_0, C_1, ..., C_i ]\r\n    # Fetch C_(i-j)\r\n    dup.1\r\n    sub\r\n    mem_load\r\n    # Fetch C_j\r\n    swap\r\n    mem_load\r\n    # Multiply\r\n    mul\r\n    # [ C_j * C_(i-j), ... ]\r\nend\r\n\r\n#! Calculate C_i.\r\n#! Assumes that all C_j for j < i have already been calculated and stored in memory\r\nproc.catalan_i\r\n    # stack : [ i, ... ], mem : [ C_0, C_1, ..., C_(i-1) ]\r\n    dup\r\n    push.0\r\n    eq\r\n    if.true\r\n        # Base case: C_0 = 1\r\n        # [ 0, ... ]\r\n        push.1\r\n    else\r\n        # Induction case: C_i = C_(k+1)\r\n        # [ i, ... ]\r\n        dup\r\n        sub.1\r\n        # [ k, i, ... ]\r\n        # Initialize running total\r\n        push.0\r\n        # [ running_total, k, i, ... ]\r\n        # Initialize maximum for counter (k/2)\r\n        dup.1\r\n        # Need to use u32 division to truncate properly\r\n        # Safe to use unchecked, since k < i <= n+1, and n+1 has been asserted as u32\r\n        u32unchecked_div.2\r\n        # [ k/2, running_total, k, i, ... ]\r\n        # Initialize counter\r\n        push.0\r\n        # [ j, k/2, running_total, k, i, ... ]\r\n        # Calculate sum until penultimate summand\r\n        exec.check_continue_neq\r\n        while.true\r\n            dup\r\n            dup.4\r\n            exec.fetch_and_multiply\r\n            # [ C_j * C_(k-j), j, k/2, running_total, k, i, ... ]\r\n            # Add 2 * C_j * C_(k-j) to running total\r\n            mul.2\r\n            movup.3\r\n            add\r\n            movdn.2\r\n            # [ j, k/2, new running_total, k, i, ... ]\r\n            # Update counter and check for termination\r\n            add.1\r\n            exec.check_continue_neq\r\n        end\r\n        # [ k/2, k/2, running_total, k, i, ... ]\r\n        # Check if k is odd ( = i is even )\r\n        dup.3\r\n        dup.1\r\n        # [ k/2, k, k/2, k/2, running_total, k, i, ... ]\r\n        sub\r\n        eq\r\n        if.true\r\n            # k is even ( = i is odd )\r\n            # [ k/2, running_total, k, i, ... ]\r\n            mem_load\r\n            dup\r\n            mul\r\n            add\r\n        else\r\n            # k is odd ( = i is even )\r\n            # [ k/2, running_total, k, i, ... ]\r\n            dup.2\r\n            exec.fetch_and_multiply\r\n            mul.2\r\n            add\r\n        end\r\n        # k is no longer needed\r\n        swap\r\n        drop\r\n    end\r\n    # stack : [ C_i, i, ... ], mem : [ C_0, C_1, ..., C_(i-1) ]\r\n    swap\r\n    mem_store\r\n    # stack : [ ... ], mem : [ C_0, C_1, ..., C_i ]\r\nend\r\n\r\nbegin\r\n    # [ n ]\r\n    # Validate n as u32. This ensures that the counter\r\n    # (which is always less than n+1) can be used for u32 division\r\n    # on the counter and to access memory without going out of bounds \r\n    u32assert\r\n    add.1\r\n\r\n    # counters are now guaranteed to be u32\r\n    # initialize counter i\r\n    push.0\r\n\r\n    # [ 0, n + 1 ]\r\n    exec.check_continue_neq\r\n    while.true\r\n        # [ i, n + 1 ]\r\n        dup\r\n        exec.catalan_i\r\n        # [ i, n + 1 ]\r\n        add.1\r\n        exec.check_continue_neq\r\n    end    \r\n    # [ n + 1, n + 1 ]\r\n    drop\r\n    sub.1\r\n    mem_load\r\nend\r\n"
    },
    "/masm/collatz": {
        "name": "collatz",
        "type": "masm",
        "path": "/masm/collatz",
        "content": "# A program which executes an unbounded loop to compute a Collatz sequence\r\n# which starts with the provided value; the output of the program is the number of steps\r\n# needed to reach 1 - the end of the sequence\r\n\r\n\r\nbegin\r\n    push.0 adv_push.1 dup push.1 neq\r\n    while.true\r\n        # counter\r\n        swap push.1 add swap \r\n        \r\n        # actual check\r\n        dup push.2 u32checked_mod\r\n        if.true\r\n            push.3 mul push.1 add\r\n        else\r\n            push.2 u32checked_div\r\n        end\r\n        dup push.1 neq\r\n    end\r\n    swap\r\nend"
    },
    "/masm/comparison": {
        "name": "comparison",
        "type": "masm",
        "path": "/masm/comparison",
        "content": "# A program which checks if the value provided as secret input via the advice tape is\r\n# less than 9; if it is, the value is multiplied by 9, otherwise, 9 is added\r\n# to the value; then we check if the value is odd. \r\n\r\nbegin\r\n    # Add the secret input to the top of the stack\r\n    # and copy it - Stack now is [secret input, secret input, ...]\r\n    adv_push.1\r\n    dup\r\n\r\n    # Add 9 to the top of the stack, \r\n    # we want to compare our secret input with 9\r\n    push.9\r\n\r\n    # Compare stack pos 0 and 1 (9 and secret input)\r\n    # Pops both items that are compared and puts either 0 or 1 on top\r\n    lt\r\n\r\n    if.true\r\n        push.9\r\n        mul\r\n    else\r\n        push.9\r\n        add\r\n    end\r\n\r\n    # Check if final result mod 2 is 0 or 1 (numer is either even or odd)\r\n    push.2\r\n    u32checked_mod\r\nend"
    },
    "/masm/conditional": {
        "name": "conditional",
        "type": "masm",
        "path": "/masm/conditional",
        "content": "# A program which either adds or multiplies two numbers - 3 and 5\r\n# based on the value provided via the advice tape as secret input\r\n\r\nbegin\r\n    # Add the two numbers to the stack that \r\n    # are either to be added or multiplied together \r\n    push.3\r\n    push.5\r\n\r\n    # Add the secret input to the stack - is it 1 or 0?\r\n    adv_push.1\r\n    \r\n    if.true\r\n        add\r\n    else\r\n        mul\r\n    end\r\nend"
    },
    "/masm/fibonacci": {
        "name": "fibonacci",
        "type": "masm",
        "path": "/masm/fibonacci",
        "content": "# Elegant way to calculate the 1001st fibonacci number \r\n\r\nbegin\r\n    repeat.1000\r\n        swap \r\n        dup.1 \r\n        add\r\n    end\r\nend\r\n"
    },
    "/masm/game_of_life_4x4": {
        "name": "game_of_life_4x4",
        "type": "masm",
        "path": "/masm/game_of_life_4x4",
        "content": "# GAME OF LIFE - and we can prove it\r\n# Provide initial configuaration in *.input {\"operand_stack\": [\"0\" | \"1\" ] * 16 }\r\n# Rules:\r\n# 1. Any live cell with two or three live neighbours survives.\r\n# 2. Any dead cell with three live neighbours becomes a live cell.\r\n# 3. All other live cells die in the next generation. Similarly, all other dead cells stay dead.\r\n\r\n# We store the initial configuration\r\nproc.storecellsn.16\r\n    loc_store.0 \r\n    loc_store.1 \r\n    loc_store.2\r\n    loc_store.3\r\n    loc_store.4\r\n    loc_store.5\r\n    loc_store.6\r\n    loc_store.7\r\n    loc_store.8\r\n    loc_store.9\r\n    loc_store.10\r\n    loc_store.11 \r\n    loc_store.12 \r\n    loc_store.13 \r\n    loc_store.14\r\n    loc_store.15\r\nend\r\n\r\n# We load the final configuration after each step\r\nproc.loadcellsnplus1.32\r\n    loc_load.16\r\n    loc_load.17\r\n    loc_load.18\r\n    loc_load.19\r\n    loc_load.20\r\n    loc_load.21\r\n    loc_load.22\r\n    loc_load.23\r\n    loc_load.24\r\n    loc_load.25\r\n    loc_load.26\r\n    loc_load.27\r\n    loc_load.28\r\n    loc_load.29\r\n    loc_load.30\r\n    loc_load.31\r\nend\r\n\r\n# We clean the stack \r\nproc.clearstack\r\n    repeat.16\r\n        drop\r\n    end\r\nend\r\n\r\n# State transition for cell 0\r\nproc.zero.33\r\n    # We can assume the cell to be dead unless proven otherwise\r\n    push.0\r\n    loc_store.16\r\n\r\n    # Neighbours\r\n    loc_load.1\r\n    loc_load.4\r\n    loc_load.5\r\n\r\n    # Push cell 0 to the top of the stack \r\n    loc_load.0\r\n\r\n    # Live or dead?\r\n    if.true\r\n    \r\n        # Cell 0 is alive - Yeah!\r\n        # Does it have 2 or 3 live neighbours?\r\n        \r\n        # Max neighbours of cell are 8 so we need 7 additions to get the sum of the stack\r\n        # because the value of the cell is already dropped\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        # We want to compare the sum of all neighbours two times, so we copy it one time\r\n        dup\r\n\r\n        # Now we see if the sum of all neighbours is equal to 2\r\n        push.2\r\n        eq\r\n\r\n        # Equal pushes 1 to the top of the stack if the cell has two neighbours - 0 otherwise\r\n        if.true\r\n            # If this is true we store 1 for this cell for the next round - the cell will live Yeah!\r\n            push.1\r\n            loc_store.16\r\n        end\r\n\r\n        # now we see if it is equal to 3\r\n        push.3\r\n        eq\r\n\r\n        # equal pushes 1 to the top of the stack if the cell has three neighbours\r\n        if.true\r\n            # if this is true we store 1 for this cell for the next round - the cell will live Yeah!\r\n            push.1\r\n            loc_store.16\r\n        end\r\n\r\n    else\r\n        # The cell is dead but might come alive\r\n    \r\n        # Max neighbours of cell are 8 so we need 7 additions to get the sum of the stack\r\n        # because the value of the cell is already dropped\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        # Now we see if it is equal to 3\r\n        push.3\r\n        eq\r\n\r\n        # Equal pushes 1 to the top of the stack if the cell has three living neighbours\r\n        if.true\r\n            # if this is true we store 1 for this cell for the next round - the cell will live Yeah!\r\n            push.1\r\n            loc_store.16\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 1\r\nproc.one.34\r\n    push.0\r\n    loc_store.17\r\n\r\n    # Load the Neighbours\r\n    loc_load.0\r\n    loc_load.2\r\n    loc_load.4\r\n    loc_load.5\r\n    loc_load.6\r\n\r\n    # Push cell 1 to the top of the stack \r\n    loc_load.1\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.17\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.17\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.17\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 2\r\nproc.two.35\r\n    push.0\r\n    loc_store.18\r\n\r\n    # Load the Neighbours\r\n    loc_load.1\r\n    loc_load.3\r\n    loc_load.5\r\n    loc_load.6\r\n    loc_load.7\r\n\r\n    # Push cell 2 to the top of the stack \r\n    loc_load.2\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.18\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.18\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.18\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 3\r\nproc.three.36\r\n    push.0\r\n    loc_store.19\r\n\r\n    # Load the Neighbours\r\n    loc_load.2\r\n    loc_load.6\r\n    loc_load.7\r\n\r\n    # Push cell 3 to the top of the stack \r\n    loc_load.3\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.19\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.19\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.19\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 4\r\nproc.four.37\r\n    push.0\r\n    loc_store.20\r\n\r\n    # Load the Neighbours\r\n    loc_load.0\r\n    loc_load.1\r\n    loc_load.5\r\n    loc_load.8\r\n    loc_load.9\r\n\r\n    # Push cell 4 to the top of the stack \r\n    loc_load.4\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.20\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.20\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.20\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 5\r\nproc.five.38\r\n    push.0\r\n    loc_store.21\r\n\r\n    # Load the Neighbours\r\n    loc_load.0\r\n    loc_load.1\r\n    loc_load.2\r\n    loc_load.4\r\n    loc_load.6\r\n    loc_load.8\r\n    loc_load.9\r\n    loc_load.10\r\n\r\n    # Push cell 5 to the top of the stack \r\n    loc_load.5\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.21\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.21\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.21\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 6\r\nproc.six.39\r\n    push.0\r\n    loc_store.22\r\n\r\n    # Load the Neighbours\r\n    loc_load.1\r\n    loc_load.2\r\n    loc_load.3\r\n    loc_load.5\r\n    loc_load.7\r\n    loc_load.9\r\n    loc_load.10\r\n    loc_load.11\r\n\r\n    # Push cell 6 to the top of the stack \r\n    loc_load.6\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.22\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.22\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.22\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 7\r\nproc.seven.40\r\n    push.0\r\n    loc_store.23\r\n\r\n    # Load the Neighbours\r\n    loc_load.2\r\n    loc_load.3\r\n    loc_load.6\r\n    loc_load.10\r\n    loc_load.11\r\n\r\n    # Push cell 7 to the top of the stack \r\n    loc_load.7\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.23\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.23\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.23\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 8\r\nproc.eight.41\r\n    push.0\r\n    loc_store.24\r\n\r\n    # Load the Neighbours\r\n    loc_load.4\r\n    loc_load.5\r\n    loc_load.9\r\n    loc_load.12\r\n    loc_load.13\r\n\r\n    # Push cell 8 to the top of the stack \r\n    loc_load.8\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.24\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.24\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.24\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 9\r\nproc.nine.42\r\n    push.0\r\n    loc_store.25\r\n\r\n    # Load the Neighbours\r\n    loc_load.4\r\n    loc_load.5\r\n    loc_load.6\r\n    loc_load.8\r\n    loc_load.10\r\n    loc_load.12\r\n    loc_load.13\r\n    loc_load.14\r\n\r\n    # Push cell 9 to the top of the stack \r\n    loc_load.9\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.25\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.25\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.25\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 10\r\nproc.ten.43\r\n    push.0\r\n    loc_store.26\r\n\r\n    # Load the Neighbours\r\n    loc_load.5\r\n    loc_load.6\r\n    loc_load.7\r\n    loc_load.9\r\n    loc_load.11\r\n    loc_load.13\r\n    loc_load.14\r\n    loc_load.15\r\n\r\n    # Push cell 10 to the top of the stack \r\n    loc_load.10\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.26\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.26\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.26\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 11\r\nproc.eleven.44\r\n    push.0\r\n    loc_store.27\r\n\r\n    # Load the Neighbours\r\n    loc_load.7\r\n    loc_load.6\r\n    loc_load.10\r\n    loc_load.14\r\n    loc_load.15\r\n\r\n    # Push cell 11 to the top of the stack \r\n    loc_load.11\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.27\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.27\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.27\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 12\r\nproc.twelve.45\r\n    push.0\r\n    loc_store.28\r\n\r\n    # Load the Neighbours\r\n    loc_load.8\r\n    loc_load.9\r\n    loc_load.13\r\n\r\n    # Push cell 12 to the top of the stack \r\n    loc_load.12\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.28\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.28\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.28\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 13\r\nproc.thirteen.46\r\n    push.0\r\n    loc_store.29\r\n\r\n    # Load the Neighbours\r\n    loc_load.8\r\n    loc_load.9\r\n    loc_load.10\r\n    loc_load.12\r\n    loc_load.14\r\n\r\n    # Push cell 13 to the top of the stack \r\n    loc_load.13\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.29\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.29\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.29\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 14\r\nproc.fourteen.47\r\n    push.0\r\n    loc_store.30\r\n\r\n    # Load the Neighbours\r\n    loc_load.9\r\n    loc_load.10\r\n    loc_load.11\r\n    loc_load.13\r\n    loc_load.15\r\n\r\n    # Push cell 14 to the top of the stack \r\n    loc_load.14\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.30\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.30\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.30\r\n        end\r\n    end\r\nend\r\n\r\n# State transition for cell 15\r\nproc.fifteen.48\r\n    push.0\r\n    loc_store.31\r\n\r\n    # Load the Neighbours\r\n    loc_load.10\r\n    loc_load.11\r\n    loc_load.14\r\n\r\n    # Push cell 15 to the top of the stack \r\n    loc_load.15\r\n\r\n    if.true\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        dup\r\n        push.2 eq\r\n\r\n        if.true\r\n            push.1 loc_store.31\r\n        end\r\n\r\n        push.3 eq\r\n\r\n        if.true\r\n            push.1 loc_store.31\r\n        end\r\n\r\n    else\r\n        repeat.7\r\n            add\r\n        end\r\n\r\n        push.3 eq\r\n        if.true\r\n            push.1 loc_store.31\r\n        end\r\n    end\r\nend\r\n\r\n# Let's play\r\nbegin\r\n    repeat.10\r\n        # We store the initial configuration in local variables and clear the stack \r\n        exec.storecellsn\r\n\r\n        # For each cell n, we need to compute the state transition and \r\n        # store in a seperate variable at index (n+16). Then we clear the stack again\r\n        exec.zero       exec.clearstack\r\n        exec.one        exec.clearstack\r\n        exec.two        exec.clearstack\r\n        exec.three      exec.clearstack\r\n        exec.four       exec.clearstack\r\n        exec.five       exec.clearstack\r\n        exec.six        exec.clearstack\r\n        exec.seven      exec.clearstack\r\n        exec.eight      exec.clearstack\r\n        exec.nine       exec.clearstack\r\n        exec.ten        exec.clearstack\r\n        exec.eleven     exec.clearstack\r\n        exec.twelve     exec.clearstack\r\n        exec.thirteen   exec.clearstack\r\n        exec.fourteen   exec.clearstack\r\n        exec.fifteen    exec.clearstack\r\n\r\n        # We now load the final configuration\r\n        exec.loadcellsnplus1\r\n    end\r\nend"
    },
    "/masm/greatest_common_divisor": {
        "name": "greatest_common_divisor",
        "type": "masm",
        "path": "/masm/greatest_common_divisor",
        "content": "#! Program to calculate the greatest common divisor of two 32-bit integers.\r\n#! After execution completes, the top value in the stack should be the calculated GCD.\r\n\r\nbegin\r\n    # Check for the smaller integer of the two 32-bit numbers\r\n    dup.1 dup.1                 # [a, b, a, b]\r\n    u32checked_lt               # [1, a, b] or [0, a, b]\r\n\r\n    # Sort them in ascending order\r\n    cswap                       # [b, a]; for simplicity lets assume b < a\r\n\r\n    # Begin the conditional loop. Condition being the mod of the top two values is not 0\r\n    push.1                      # [1, b, a], to start the loop\r\n    while.true                  # [rn, rn-1, ..., r0, b, a]; for first iteration stack is [b, a]\r\n        dup.1 dup.1             # [rn, rn-1, rn, rn-1, ..., r0, b, a]\r\n        \r\n        # Calculate the mod of the integers to check if whether the smaller one is gcd\r\n        u32unchecked_mod        # [rn+1, rn, rn-1, ..., b, a]; \r\n        dup                     # [rn+1, rn+1, ..., b, a]\r\n        neq.0                   # [0 != rn+1, rn+1, ..., b, a]\r\n    end\r\n    drop                        # drop the top value, which'll be 0 from the stack to expose gcd at the top\r\nend\r\n"
    },
    "/masm/matrix_multiplication": {
        "name": "matrix_multiplication",
        "type": "masm",
        "path": "/masm/matrix_multiplication",
        "content": "# is_not_zero_or_negative_one(el: Felt) -> Bool\r\n#\r\n# True if the value on the top of the stack is different than 0 and -1.\r\n#\r\n# This test is approximately 5 cycles, so 1 cycle faster than a lt operation.\r\n# It only works for field elements, and not u32.\r\nproc.is_not_zero_or_negative_one.0\r\n    # input: [el, ...]\r\n    # output: [b, ...]\r\n\r\n    # [b1, el, ...]\r\n    dup neq.0\r\n\r\n    # [b2, b1, ...]\r\n    swap neq.18446744069414584320\r\n\r\n    and\r\nend\r\n\r\n# count_to_word(length: Felt) -> Felt\r\n#\r\n# Given the top of the stack is a length, determines how many words are\r\n# required to store `length` items consecutively.\r\nproc.count_to_word.0\r\n    # input: [length, ...]\r\n    # output: [word_count, ...]\r\n    u32checked_divmod.4 eq.0 not add\r\nend\r\n\r\n# multiply_add_word(a: Word, b: Word) -> Felt\r\n#\r\n# Given two words on the top of the stack, first multiply elements at the same\r\n# position, then add the results together.\r\nproc.multiply_add_word.0\r\n    # input: [A, B, ...]\r\n    # output: [c, ...]\r\n\r\n    # [a3, a2, a1, a0, b3, b2, b1, b0, ...]\r\n\r\n    # c3 = a3 * b3\r\n    # [c3, a2, a1, a0, b2, b1, b0, ...]\r\n    movup.4 mul\r\n\r\n    # c2 = a2 * b2\r\n    # [c2, c3, a1, a0, b1, b0, ...]\r\n    swap movup.4 mul\r\n\r\n    # c = c2 + c3 ; c1 = a1 * b1\r\n    # [c1, c, a0, b0, ...]\r\n    add swap movup.3 mul\r\n\r\n    # c = c + c1 ; c0 = a0 * b0\r\n    # [c0, c, ...]\r\n    add movdn.2 mul\r\n\r\n    # c = c + c0\r\n    # [c, ...]\r\n    add\r\nend\r\n\r\n# copy_matrix_length_from_tape(writePtr: out Address) -> (row, col, writePtr, T0, T1, T2)\r\n#\r\n# Loads row and col from the advice tape and prepare the stack.\r\nproc.copy_matrix_length_from_tape.0\r\n    # input: [writePtr, ...]\r\n    # output: [row, col, writePtr, H, H, H, ...]\r\n\r\n    # [H, H, H, writePtr, 0, 0, 0, ...]\r\n    push.0 push.0 push.0 movup.3 padw padw padw\r\n\r\n    # [H, H, H, writePtr+2, 0, 0, 0, ...]\r\n    adv_pipe\r\n\r\n    # [writePtr+2, 0, 0, 0, H, H, H, ...]\r\n    movupw.3\r\n\r\n    # remove the padding word after the [row, column]\r\n    # [writePtr+1, 0, 0, 0, H, H, H, ...]\r\n    sub.1\r\n\r\n    # save a copy of the adresss\r\n    # [writePtr+1, 0, 0, 0, writePtr, H, H, H, ...]\r\n    dup movdn.4\r\n\r\n    # load the row and col from memory\r\n    # [row, col, 0, 0, writePtr+1, H, H, H, ...]\r\n    dup sub.1 mem_loadw\r\n\r\n    # drop padding\r\n    # [row, col, writePtr+1, H, H, H, ...]\r\n    movup.2 drop movup.2 drop\r\nend\r\n\r\n# copy_matrix_data_from_tape(\r\n#      iterations: Felt, words: Felt, writePtr: out Address,\r\n#      S0: Felt, S1: Felt, S2: Felt,\r\n#  ) -> (T0, T1, T2)\r\n#\r\n# Column and row major order matrixes are padded the same way, this procedure\r\n# copies the data from the advice tape to memory. The value of `words`\r\n# determines the size of each column/row, and `iterations` how many there are.\r\nproc.copy_matrix_data_from_tape.0\r\n    # input: [iterations, words, writePtr, H, H, H, ...]\r\n    # output: [H, H, H, ...]\r\n\r\n    # OUTER: [iterations, words, writePtr, H, H, H, ...]\r\n\r\n    # if(iterations>0)\r\n    dup neq.0 while.true\r\n\r\n        # save a copy of `words` for the next iteration, call the loop counter `c`\r\n        # [c, words, iterations, addr, H, H, H, ...]\r\n        swap dup\r\n\r\n        # INNER: [c, addr, words, iterations, H, H, H, ...]\r\n        movup.3 swap\r\n\r\n        # if(c>0)\r\n        dup neq.0 while.true\r\n            # [H, H, H, addr, c, words, iterations, ...]\r\n            swap movdnw.3\r\n\r\n            # [H, H, H, addr, c, words, iterations, ...]\r\n            adv_pipe\r\n\r\n            # INNER: [c, addr, words, iterations, H, H, H, ...]\r\n            movupw.3 swap\r\n\r\n            # every call to `adv_pipe` copies *two* words\r\n            sub.2\r\n\r\n            # while(c>0)\r\n            dup exec.is_not_zero_or_negative_one\r\n        end\r\n\r\n        # remove the padding word at the end of the row/column\r\n        eq.18446744069414584320 if.true\r\n            sub.1\r\n        end\r\n\r\n        # OUTER: [iterations, words, addr, H, H, H, ...]\r\n        movdn.2 swap\r\n\r\n        # while(iterations>0)\r\n        sub.1 dup neq.0\r\n    end\r\n\r\n    # [H, H, H, ...]\r\n    drop drop drop\r\nend\r\n\r\n# matrix_multiply(addrA: in Address, addrB: in Address, addrC: out Address) -> void\r\n#\r\n# Given 3 memory addresses on the top of the stack, [addrA, addrB, addrC].\r\n# Where each address is the memory location of a matrices. A, B, C, and\r\n# matrices A and C are in row-major order, while matrix B is column major.\r\n# This procedure computes C=A*B.\r\n#\r\n# Notes: \r\n# - `addrC` must different to `addrA` and `addrB`\r\n# - This procedure only works with matrixes where both row and col are u32\r\n# values\r\nproc.matrix_multiply.0\r\n    # input: [addrA, addrB, addrC, ...]\r\n    # output: [...]\r\n\r\n    # copy dimensions of A\r\n    # [[rowA, colA, 0, 0], addrA, addrB, addrC, ...]\r\n    padw dup.4 mem_loadw\r\n\r\n    # copy dimensions of B\r\n    # [[rowB, colB, 0, 0], [rowA, colA, 0, 0], addrA, addrB, addrC, ...]\r\n    padw dup.9 mem_loadw\r\n\r\n    # assert rowB==colA requirement for matrix multiplication\r\n    # [[colB, 0, 0, rowA], [colA, 0, 0, addrA], addrB, addrC, ...]\r\n    dup.5 assert_eq\r\n\r\n    # Set C's size, where rowC=rowA colC=colB\r\n    # [[rowC, colC, 0, 0], [colA, 0, 0, addrA], addrB, addrC, ...]\r\n    movup.3 dup.9 mem_storew\r\n\r\n    # count the number of words the inner most loop have to consume.\r\n    # [[words, rowC, colC, 0], [0, 0, 0, addrA], addrB, addrC, ...]\r\n    movup.4 exec.count_to_word\r\n\r\n    # discard extra padding in the middle of the data\r\n    # [[words, rowC, colC, 0], [0, addrA, addrB, addrC], ...]\r\n    movup.3 drop movup.3 drop\r\n\r\n    # udpate all indices by one, accounts for the size being set\r\n    # [[addrA+1, addrB+1, addrC+1, 0], [words, rowC, colC, 0], ...]\r\n    swapw movup.3 add.1 movup.3 add.1 movup.3 add.1\r\n\r\n    # Prepare elements to be used in the loops below. First word will contain\r\n    # data used by the outer loop, second word the data for the inner loop.\r\n    # Elements of the second word are organized so that they are touched only\r\n    # once per iteration, to reduce maintenance operations of the hot inner\r\n    # loop.\r\n    #\r\n    # `r`: starts at `rowC` and decrements until `0`\r\n    # `writePtr`: starts at `addrC+1` and increment as data is written\r\n    # `readA`: starts at `addrA+1` and increments by `words` after every row is\r\n    # computed\r\n    #\r\n    # [[r, 0, colC, writePtr], [words, readA, addrB, 0], ...]\r\n    movup.4 swapw swap.7 swap.3 swap\r\n\r\n    ## # DEBUG\r\n    ## dup.0 eq.2 assert   # rows(A)\r\n    ## dup.1 eq.0 assert   # always 0\r\n    ## dup.2 eq.2 assert   # columns(B)\r\n    ## dup.3 eq.301 assert # address(C) + 1\r\n    ## dup.4 eq.1 assert   # round_up(columns(A) / 4)\r\n    ## dup.5 eq.101 assert # address(A) + 1\r\n    ## dup.6 eq.201 assert # address(B) + 1\r\n    ## dup.7 eq.0 assert\r\n    ## # /DEBUG\r\n\r\n    # ROW: [[r, 0, colC, writePtr], [words, readA, addrB, 0], ...]\r\n    # while(r!=0)\r\n    dup neq.0 while.true\r\n\r\n        # The loop counter `c` will be increasing from 0 to colC.\r\n        # Used for:\r\n        #   1. End condition when c==colC\r\n        #   2. Offset into addrB\r\n        #   3. To determine how many padding zeros are needed for row\r\n        # [[c, r, colC, writePtr], [words, readA, addrB, 0], ...]\r\n        swap\r\n\r\n        ## # DEBUG\r\n        ## dup.0 eq.0 assert         # c==0\r\n        ## dup.1 push.2 lte assert   # r <= rows(A)\r\n        ## dup.2 eq.2 assert         # columns(B)\r\n        ## dup.3 push.300 gt assert  # writePtr > address(C)\r\n        ## dup.3 push.302 lte assert # && writePtr < address(C) + total_words_in(A)\r\n        ## dup.4 eq.1 assert         # round_up(columns(A) / 4)\r\n        ## dup.5 push.100 gt assert  # readA > address(A)\r\n        ## dup.5 push.102 lte assert # && readA < address(A) + total_words_in(A)\r\n        ## dup.6 push.200 gt assert  # addrB > address(B)\r\n        ## dup.6 push.202 lte assert # && addrB < address(B) + total_words_in(B)\r\n        ## dup.7 eq.0 assert\r\n        ## # /DEBUG\r\n\r\n        # COLUMN: [[c, r, colC, writePtr], [words, readA, addrB, 0], RESULT_DATA, ...]\r\n        # while(c!=colC)\r\n        dup dup.3 neq while.true\r\n            ## DEBUG\r\n            ## dup.0 push.0 gte assert   # c>=0\r\n            ## dup.0 push.2 lt assert    # && c<columns(B)\r\n            ## dup.1 push.2 lte assert   # r <= rows(A)\r\n            ## dup.2 eq.2 assert         # columns(B)\r\n            ## dup.3 push.300 gt assert  # writePtr > address(C)\r\n            ## dup.3 push.302 lte assert # && writePtr < address(C) + total_words_in(A)\r\n            ## dup.4 eq.1 assert         # round_up(columns(A) / 4)\r\n            ## dup.5 push.100 gt assert  # readA > address(A)\r\n            ## dup.5 push.102 lte assert # && readA < address(A) + total_words_in(A)\r\n            ## dup.6 push.200 gt assert  # addrB > address(B)\r\n            ## dup.6 push.202 lte assert # && addrB < address(B) + total_words_in(B)\r\n            ## dup.7 eq.0 assert\r\n            ## /DEBUG\r\n\r\n            # [[i, readA, addrB, acc], [words, readA, addrB, 0], [c, r, colC, writePtr], ...]\r\n            swapw dupw\r\n\r\n            # setup curr_col to the right column\r\n            # curr_col = addrB + (words * c)\r\n            # [[i, readA, curr_col, acc], [words, readA, addrB, 0], [c, r, colC, writePtr], ...]\r\n            dup dup.9 mul movup.3 add movdn.2\r\n\r\n            # MATH: [[i, readA, curr_col, acc], [words, readA, addrB, 0], [c, r, colC, writePtr], ...]\r\n            # while(i!=0)\r\n            dup neq.0 while.true\r\n\r\n                # [[acc, i, readA, curr_col], [words, readA, addrB, 0], [c, r, colC, writePtr], ...]\r\n                movup.3\r\n\r\n                # [[A], [acc, i, readA, curr_col], [words, readA, addrB, 0], [c, r, colC, writePtr], ...]\r\n                padw dup.6 mem_loadw\r\n\r\n                # [[B], [A], [acc, i, readA, curr_col], [words, readA, addrB, 0], [c, r, colC, writePtr], ...]\r\n                padw dup.11 mem_loadw\r\n\r\n                # note: it is okay to use this procedure for matrixes that\r\n                # don't have enough elements to fill the last word, because the\r\n                # word is padded with zeros\r\n                # [[acc, i, readA, curr_col], [words, readA, addrB, 0], [c, r, colC, writePtr], ...]\r\n                exec.multiply_add_word add\r\n\r\n                # update indices\r\n                # [[readA, curr_col+1, acc, i], [words, readA, addrB, 0], [c, r, colC, writePtr], ...]\r\n                movup.3 add.1 movup.3\r\n\r\n                # [[i, readA, curr_col, acc], [words, readA, addrB, 0], [c, r, colC, writePtr], ...]\r\n                movup.3\r\n\r\n                # while(i!=0)\r\n                sub.1 dup neq.0\r\n            end\r\n\r\n            # discard the auxiliary loop data, and save the computed element\r\n            # [[words, readA, addrB, 0], [c, r, colC, writePtr], acc, ...]\r\n            drop drop drop movdn.8\r\n\r\n            # count the element\r\n            # [[c, r, colC, writePtr], [words, readA, addrB, 0], acc, ...]\r\n            swapw add.1 \r\n\r\n            # while(c!=colC)\r\n            dup dup.3 neq\r\n        end\r\n\r\n        # add the padding\r\n        # [[c, r, colC, writePtr], [words, readA, addrB, 0], acc, ...]\r\n        dup push.3 u32checked_and neq.0 while.true\r\n            push.0 movdn.7\r\n\r\n            add.1 dup push.3 u32checked_and neq.0 \r\n        end\r\n\r\n        # at this point there is a complete row of C's data on the stack. push\r\n        # it to the memory\r\n        # [[word_offset, r, colC, writePtr], [words, readA, addrB, 0], acc, ...]\r\n        drop dup.3\r\n\r\n        # COPY: [[word_offset, r, colC, writePtr], [words, readA, addrB, 0], acc, ...]\r\n        # while(word_offset>0)\r\n        dup neq.0 while.true\r\n            # This does two things:\r\n            # - Adjust the word for pointer arithmethic, the 3rd word is 2\r\n            # positions ahead of writePtr.\r\n            # - Already decrements the loop variable prior to the loop check below\r\n            sub.1 \r\n\r\n            # [[DATA], [word_offset, r, colC, writePtr], [words, readA, addrB, 0], acc, ...]\r\n            movupw.2\r\n\r\n            # data is stored from back to front\r\n            swap movup.2 movup.3\r\n\r\n            # offset writePtr, data is store from back to front\r\n            dup.7 dup.5 add\r\n\r\n            # COPY: [[word_offset, r, colC, writePtr], [words, readA, addrB, 0], acc, ...]\r\n            mem_storew dropw\r\n\r\n            dup neq.0 # while(word_offset>0)\r\n        end\r\n\r\n        # Advance writePtr by a row\r\n        # [[0, r, colC, writePtr+1], [words, readA, addrB, 0], ...]\r\n        movup.3 dup.4 add movdn.3\r\n\r\n        # Advance readA by a row\r\n        # [[0, r, colC, writePtr], [words, readA+1, addrB, 0], ...]\r\n        swapw swap dup.1 add swap swapw\r\n\r\n        # ROW: [[r, 0, colC, writePtr], [words, readA, addrB, 0], ...]\r\n        swap\r\n\r\n        # while(r!=0)\r\n        sub.1 dup neq.0\r\n    end\r\n\r\n    # Clean stack\r\n    dropw dropw\r\nend\r\n\r\n# matrix_row_major_copy(destination: out Address) -> (T0, T1, T2)\r\n#\r\n# Copies a matrix from the advice tape to memory. The matrix data must be\r\n# carefully encoded into the advice tape. The first eight elements must be:\r\n#\r\n#   [0, 0, col, row, 0, 0, 0, 0]\r\n#\r\n# Then the matrix is encoded row-wise, from top to bottom. Each row must be\r\n# first padded with the element 0 until its size is a multiple of 8. These\r\n# elements are then handled in groups of 4, in each group their elements be in\r\n# reverse order. As an example, the following matrix:\r\n#\r\n#   [2, 3, 4]\r\n#   [5, 6, 7]\r\n#\r\n# First has its rows padded to be a multiple of 8:\r\n#\r\n#   [2, 3, 4, 0, 0, 0, 0, 0]\r\n#   [5, 6, 7, 0, 0, 0, 0, 0]\r\n#\r\n# Then reverse the elements order for each 4-element group:\r\n#\r\n#   [0, 4, 3, 2, 0, 0, 0, 0]\r\n#   [0, 7, 6, 5, 0, 0, 0, 0]\r\n#\r\n# Resulting in the following encoding:\r\n#\r\n# [\r\n#     0, 0, 3, 2, 0, 0, 0, 0,  # matrix size\r\n#     0, 4, 3, 2, 0, 0, 0, 0,  # first row\r\n#     0, 7, 6, 5, 0, 0, 0, 0,  # second row\r\n# ]\r\n#\r\n# The data is read into memory preserving padding *elements*, but removing\r\n# padding *words*. So the data above will be store as:\r\n#\r\n#     addr+0: [2, 3, 0, 0]  # matrix size\r\n#     addr+1: [2, 3, 4, 0]  # first row\r\n#     addr+2: [5, 6, 7, 0]  # second row\r\n#\r\n# Notes:\r\n# - This procedure *must* be called with `exec` to copy the data to memory.\r\n# - The data packingig done to take advantage of `adv_pipe`, a very efficient\r\n# primitive to load and verify data from tape to memory. Tightly packing the\r\n# data into the tape would likely be two orders of magnitude slower.\r\n# - This procedure can use up to `size//4 + 2`\r\n#\r\nproc.matrix_row_major_copy.0\r\n    # input: [writePtr, ...]\r\n    # output: [H, H, H, ...]\r\n\r\n    # [row, col, writePtr, H, H, H, ...]\r\n    exec.copy_matrix_length_from_tape\r\n\r\n    # The number of `row`s determines the `iterations` of the copy loop.\r\n    # [iterations, words, writePtr, H, H, H, ...]\r\n    swap exec.count_to_word swap\r\n\r\n    exec.copy_matrix_data_from_tape\r\nend\r\n\r\n# matrix_column_major_copy(destination: out Address) -> (T0, T1, T2)\r\n#\r\n# Copies a matrix from the advice tape to memory. The matrix data must be\r\n# carefully encoded into the advice tape. The first eigth elements must be:\r\n#\r\n#   [0, 0, col, row, 0, 0, 0, 0]\r\n#\r\n# Then the matrix is encoded column-wise, from left to right. Each column must\r\n# be first padded with the element 0 until its size is a multiple of 8. These\r\n# elements are then handled in groups of 4, in each group their elements be in\r\n# reverse order. As an example, the following matrix:\r\n#\r\n#   [8, 3, 1]\r\n#   [9, 6, 7]\r\n#\r\n# First has its columns padded to be a multiple of 8:\r\n#\r\n#   [8, 3, 0, 0, 0, 0, 0, 0]\r\n#   [9, 6, 0, 0, 0, 0, 0, 0]\r\n#   [1, 7, 0, 0, 0, 0, 0, 0]\r\n#\r\n# Then reverse the elements order for each 4-element group:\r\n#\r\n#   [0, 0, 3, 8, 0, 0, 0, 0]\r\n#   [0, 0, 6, 9, 0, 0, 0, 0]\r\n#   [0, 0, 7, 1, 0, 0, 0, 0]\r\n#\r\n# Resulting in the following encoding:\r\n#\r\n# [\r\n#     0, 0, 3, 2, 0, 0, 0, 0,  # matrix size\r\n#     0, 0, 3, 8, 0, 0, 0, 0,  # first column\r\n#     0, 0, 6, 9, 0, 0, 0, 0,  # second column\r\n#     0, 0, 7, 1, 0, 0, 0, 0   # third column\r\n# ]\r\n#\r\n# The data is read into memory preserving padding *elements*, but removing\r\n# padding *words*. So the data above will be store as:\r\n#\r\n#     addr+0: [2, 3, 0, 0]  # matrix size\r\n#     addr+1: [8, 3, 0, 0]  # first column\r\n#     addr+2: [9, 6, 0, 0]  # second column\r\n#     addr+3: [1, 7, 0, 0]  # third column\r\n#\r\n# Notes:\r\n# - This procedure *must* be called with `exec` to copy the data to memory.\r\n# - The data packingig done to take advantage of `adv_pipe`, a very efficient\r\n# primitive to load and verify data from tape to memory. Tightly packing the\r\n# data into the tape would likely be two orders of magnitude slower.\r\n#\r\nproc.matrix_column_major_copy.0\r\n    # input: [addr, ...]\r\n    # output: [H, H, H, ...]\r\n\r\n    # [row, col, addr, H, H, H, ...]\r\n    exec.copy_matrix_length_from_tape\r\n\r\n    # The number of `col`s determines the `iterations` of the copy loop.\r\n    # [iterations, words, writePtr, H, H, H, ...]\r\n    exec.count_to_word swap\r\n\r\n    exec.copy_matrix_data_from_tape\r\nend\r\n\r\n# TESTS\r\n# ==============================================================\r\n\r\nproc.test_is_zero_or_negative_one.0\r\n    push.0 exec.is_not_zero_or_negative_one not assert\r\n    push.0 sub.1 exec.is_not_zero_or_negative_one not assert\r\n    push.1 exec.is_not_zero_or_negative_one assert\r\n    push.2 exec.is_not_zero_or_negative_one assert\r\n    push.0 sub.2 exec.is_not_zero_or_negative_one assert\r\nend\r\n\r\nproc.test_count_to_word.0\r\n    push.0 exec.count_to_word push.0 assert_eq\r\n    push.1 exec.count_to_word push.1 assert_eq\r\n    push.2 exec.count_to_word push.1 assert_eq\r\n    push.3 exec.count_to_word push.1 assert_eq\r\n    push.4 exec.count_to_word push.1 assert_eq\r\n    push.5 exec.count_to_word push.2 assert_eq\r\n    push.9 exec.count_to_word push.3 assert_eq\r\n    push.13 exec.count_to_word push.4 assert_eq\r\nend\r\n\r\nproc.test_multiply_add_word.0\r\n    push.1 push.1 push.1 push.1 # A\r\n    push.1 push.1 push.1 push.1 # B\r\n    exec.multiply_add_word\r\n    push.4 assert_eq\r\n\r\n    push.1 push.2 push.3 push.4 # A\r\n    push.1 push.1 push.1 push.1 # B\r\n    exec.multiply_add_word\r\n    push.10 assert_eq\r\n\r\n    push.1 push.2 push.3 push.4 # A\r\n    push.4 push.3 push.2 push.1 # B\r\n    exec.multiply_add_word\r\n    push.20 assert_eq\r\nend\r\n\r\nproc.test_matrix_1_1.0\r\n    # matrix A (row-major)\r\n    # [row=1, col=1, 0, 0]\r\n    # [1]\r\n    push.0 push.0 push.1 push.1\r\n    push.0 push.0 push.0 push.1\r\n    push.101 mem_storew dropw\r\n    push.100 mem_storew dropw\r\n\r\n    # matrix B (column-major)\r\n    # [row=1, col=1, 0, 0]\r\n    # [2]\r\n    push.0 push.0 push.1 push.1\r\n    push.0 push.0 push.0 push.2\r\n    push.201 mem_storew dropw\r\n    push.200 mem_storew dropw\r\n\r\n    push.300 push.200 push.100 # [addrA, addrB, addrC]\r\n    exec.matrix_multiply\r\n\r\n    # matrix C (row-major)\r\n    # [row=1, col=1, 0, 0]\r\n    # [2]\r\n    push.0 push.0 push.1 push.1\r\n    push.0 push.0 push.0 push.2\r\n\r\n    padw push.301 mem_loadw\r\n    eqw assert dropw dropw\r\n    padw push.300 mem_loadw\r\n    eqw assert dropw dropw\r\nend\r\n\r\nproc.test_matrix_2_1.0\r\n    # matrix A (row-major)\r\n    # [row=1, col=4, 0, 0]\r\n    # [2, 3, 4, 5]\r\n    push.0 push.0 push.4 push.1\r\n    push.5 push.4 push.3 push.2\r\n    push.401 mem_storew dropw\r\n    push.400 mem_storew dropw\r\n\r\n    # matrix B (column-major)\r\n    # [row=4, col=1, 0, 0]\r\n    # [6]\r\n    # [7]\r\n    # [8]\r\n    # [9]\r\n    push.0 push.0 push.1 push.4\r\n    push.9 push.8 push.7 push.6\r\n    push.501 mem_storew dropw\r\n    push.500 mem_storew dropw\r\n\r\n    push.600 push.500 push.400 # [addrA, addrB, addrC]\r\n    exec.matrix_multiply\r\n\r\n    # matrix C (row-major)\r\n    # [row=1, col=1, 0, 0]\r\n    # [110]\r\n    push.0 push.0 push.1 push.1\r\n    push.0 push.0 push.0 push.110\r\n\r\n    padw push.601 mem_loadw\r\n    eqw assert dropw dropw\r\n    padw push.600 mem_loadw\r\n    eqw assert dropw dropw\r\nend\r\n\r\nproc.test_matrix_4_4.0\r\n    # matrix A (row-major)\r\n    # [row=2, col=4, 0, 0]\r\n    # [2, 3, 4, 5]\r\n    # [6, 7, 8, 9]\r\n    push.0 push.0 push.4 push.2\r\n    push.5 push.4 push.3 push.2\r\n    push.9 push.8 push.7 push.6\r\n    push.702 mem_storew dropw\r\n    push.701 mem_storew dropw\r\n    push.700 mem_storew dropw\r\n\r\n    # matrix B (column-major)\r\n    # [row=4, col=2, 0, 0]\r\n    # [1, 1]\r\n    # [1, 1]\r\n    # [1, 1]\r\n    # [1, 1]\r\n    push.0 push.0 push.2 push.4\r\n    push.1 push.1 push.1 push.1\r\n    push.1 push.1 push.1 push.1\r\n    push.802 mem_storew dropw\r\n    push.801 mem_storew dropw\r\n    push.800 mem_storew dropw\r\n\r\n    push.900 push.800 push.700 # [addrA, addrB, addrC]\r\n    exec.matrix_multiply\r\n\r\n    # matrix C (row-major)\r\n    # [row=2, col=2, 0, 0]\r\n    # [14, 14]\r\n    # [30, 30]\r\n    push.0 push.0 push.2 push.2\r\n    push.0 push.0 push.14 push.14\r\n    push.0 push.0 push.30 push.30\r\n\r\n    padw push.902 mem_loadw\r\n    eqw assert dropw dropw\r\n    padw push.901 mem_loadw\r\n    eqw assert dropw dropw\r\n    padw push.900 mem_loadw\r\n    eqw assert dropw dropw\r\nend\r\n\r\nproc.test_matrix_row_major_copy.0\r\n    push.1000\r\n    exec.matrix_row_major_copy\r\n\r\n    # matrix (row-major)\r\n    # [row=2, col=3, 0, 0]\r\n    # [3, 2, 0]\r\n    # [7, 5, 1]\r\n    push.0 push.0 push.3 push.2\r\n    push.0 push.0 push.2 push.3\r\n    push.0 push.1 push.5 push.7\r\n\r\n    padw push.1002 mem_loadw\r\n    eqw assert dropw dropw\r\n    padw push.1001 mem_loadw\r\n    eqw assert dropw dropw\r\n    padw push.1000 mem_loadw\r\n    eqw assert dropw dropw\r\n\r\n    dropw dropw dropw\r\nend\r\n\r\nproc.test_matrix_column_major_copy.0\r\n    push.1100\r\n    exec.matrix_column_major_copy\r\n\r\n    # matrix (column-major)\r\n    # [row=2, col=4, 0, 0]\r\n    # [0, 2, 0, 2]\r\n    # [1, 3, 1, 3]\r\n    push.0 push.0 push.4 push.2\r\n    push.0 push.0 push.1 push.0\r\n    push.0 push.0 push.3 push.2\r\n    push.0 push.0 push.1 push.0\r\n    push.0 push.0 push.3 push.2\r\n\r\n    padw push.1104 mem_loadw\r\n    eqw assert dropw dropw\r\n    padw push.1103 mem_loadw\r\n    eqw assert dropw dropw\r\n    padw push.1102 mem_loadw\r\n    eqw assert dropw dropw\r\n    padw push.1101 mem_loadw\r\n    eqw assert dropw dropw\r\n    padw push.1100 mem_loadw\r\n    eqw assert dropw dropw\r\n\r\n    dropw dropw dropw\r\nend\r\n\r\nbegin\r\n    exec.test_is_zero_or_negative_one\r\n    exec.test_count_to_word\r\n    exec.test_multiply_add_word\r\n    exec.test_matrix_1_1\r\n    exec.test_matrix_2_1\r\n    exec.test_matrix_4_4\r\n    exec.test_matrix_row_major_copy\r\n    exec.test_matrix_column_major_copy\r\nend\r\n"
    },
    "/masm/merkle_inclusion": {
        "name": "merkle_inclusion",
        "type": "masm",
        "path": "/masm/merkle_inclusion",
        "content": "# In this example we verify 1000 merkle paths in a sparse Merkle tree.\r\n# Every leaf on position i looks like [i, 0, 0, 0].\r\nbegin\r\n    padw\r\n    repeat.1000\r\n        # => [i, 0, 0, 0, d, i, R,...]\r\n\r\n        # verify merkle path for node i\r\n        mtree_verify\r\n        # => [i, 0, 0, 0, d, i, R ...]\r\n\r\n        add.1 swap.5 add.1\r\n        # => [i+1, 0, 0, 0, d, i+1, R ...]\r\n    end\r\nend"
    },
    "/masm/nprime": {
        "name": "nprime",
        "type": "masm",
        "path": "/masm/nprime",
        "content": "# append the current number to the prime list\r\nproc.append\r\n    # initial state\r\n    # [prime, i, n, primes..]\r\n\r\n    # [prime, prime, i, n, primes..]\r\n    dup\r\n\r\n    # [i, prime, prime, i, n, primes..]\r\n    dup.2\r\n\r\n    # [prime, i, n, primes..]\r\n    mem_store\r\n\r\n    # [i++, n, primes..]\r\n    swap.2\r\n    swap\r\n    add.1\r\nend\r\n\r\n# push a boolean on whether or not the program should continue\r\nproc.should_continue\r\n    # initial state\r\n    # [i, n, primes..]\r\n\r\n    # [i, n, i, n, primes..]\r\n    dup.1\r\n    dup.1\r\n\r\n    # [should_continue, i, n, primes..]\r\n    neq\r\nend\r\n\r\n# define if check should continue\r\n# will return two flags: one if the loop should continue, the other if candidate is prime\r\nproc.is_not_prime_should_continue\r\n    # initial state\r\n    # [j, candidate, i, n, primes..]\r\n\r\n    # load the current prime\r\n    # [prime, j, candidate, i, n, primes..]\r\n    dup\r\n    mem_load\r\n\r\n    # push return flags\r\n    # [continue loop?, is prime?, prime, j, candidate, i, n, primes..]\r\n    push.0.1\r\n\r\n    # a composite number have its smallest prime squared lesser than itself.\r\n    # if the squared prime is bigger than the candidate, and provided we iterate\r\n    # a list of ordered primes, then the number is a prime.\r\n    #\r\n    # this will also protect the algorithm from overflowing the list of current list of primes\r\n    # because the squared prime will always halt the iteration before the end of the list is\r\n    # reached\r\n    #\r\n    # [squared prime, continue loop?, is prime?, prime, j, candidate, i, n, primes..]\r\n    dup.2\r\n    dup\r\n    mul\r\n    # [candidate, squared prime, continue loop?, is prime?, prime, j, candidate, i, n, primes..]\r\n    dup.5\r\n    # [continue loop?, is prime?, prime, j, candidate, i, n, primes..]\r\n    gt\r\n    if.true\r\n        drop\r\n        drop\r\n        push.1.0\r\n    end\r\n\r\n    # check mod only if should continue loop\r\n    dup\r\n    if.true\r\n        # [remainder, continue loop?, is prime?, prime, j, candidate, i, n, primes..]\r\n        dup.4\r\n        dup.3\r\n        u32checked_mod\r\n\r\n        # if remainder is zero, then the number is divisible by prime; hence isn't prime\r\n        # [continue loop?, is prime?, prime, j, candidate, i, n, primes..]\r\n        eq.0\r\n        if.true\r\n            drop\r\n            drop\r\n            push.0.0\r\n        end\r\n    end\r\n\r\n    # [continue loop?, is prime?, j, candidate, i, n, primes..]\r\n    swap.2\r\n    drop\r\n    swap\r\nend\r\n\r\n# check if current candidate isn't a prime\r\nproc.is_not_prime\r\n    # initial state\r\n    # [candidate, i, n, primes..]\r\n\r\n    # create a counter `j` to iterate over primes\r\n    # [j, candidate, i, n, primes..]\r\n    push.0\r\n\r\n    exec.is_not_prime_should_continue\r\n    while.true\r\n        # [j, candidate, i, n, primes..]\r\n        drop\r\n        add.1\r\n\r\n        # [is prime?, j, candidate, i, n, primes..]\r\n        exec.is_not_prime_should_continue\r\n    end\r\n\r\n    # [is not prime?, candidate, i, n, primes..]\r\n    swap\r\n    drop\r\n    eq.0\r\nend\r\n\r\n# calculate and push next prime to the stack\r\nproc.next\r\n    # initial state\r\n    # [i, n, primes..]\r\n\r\n    # create a candidate\r\n    # [candidate, i, n, primes..]\r\n    dup.2\r\n    add.2\r\n\r\n    exec.is_not_prime\r\n    while.true\r\n        # [candidate, i, n, primes..]\r\n        add.2\r\n        exec.is_not_prime\r\n    end\r\n\r\n    # [i, n, primes..]\r\n    exec.append\r\nend\r\n\r\n# the stack is expected to contain on its top the desired primes count. this can be achieved via the\r\n# *.inputs file.\r\n#\r\n# the end of the program will return a stack containing all the primes, up to the nth argument.\r\n#\r\n# example:\r\n#\r\n# input:\r\n# [50, ..]\r\n#\r\n# output:\r\n# [229, 227, 223, 211, 199, 197, 193, 191, 181, 179, 173, 167, 163, 157, 151, 149]\r\nbegin\r\n    # create a counter `i`\r\n    push.0\r\n\r\n    # 2 and 3 are the unique sequential primes. by pushing these manually, we can iterate\r\n    # the candidates in chunks of 2\r\n\r\n    # append first known prime\r\n    push.2\r\n    exec.append\r\n\r\n    # append second known prime\r\n    push.3\r\n    exec.append\r\n\r\n    # find next primes until limit is reached\r\n    exec.should_continue\r\n    while.true\r\n        exec.next\r\n        exec.should_continue\r\n    end\r\n\r\n    # drop the counters\r\n    drop\r\n    drop\r\nend\r\n"
    },
    "/masm/shamir_secret_share": {
        "name": "shamir_secret_share",
        "type": "masm",
        "path": "/masm/shamir_secret_share",
        "content": "#! This program creates verifiable shares for a Shamir secret sharing scheme.\r\n#! This involves generation of random polynomial coefficients and \r\n#! polynomial evaluation in the prime field.  The dealer generates shares \r\n#! independently such that they can be distributed independently. The same\r\n#! secret, random seed and k value must be used to create all shares.\r\n#! A secret commitment is also included in the output such that shareholders\r\n#! can verify they all have a share associated with the same secret.\r\n#! This is a demo and is not secure.\r\n#!\r\n#! Input:\r\n#! Stack: [x, k] \r\n#! The x coordinate for which we want to generate a share, number of shares  needed to \r\n#! reconstruct secret - this defines the degree of the polynomial.\r\n#! Advice Tape: [secret, rand]\r\n#! The secret, a random field element.\r\n#!\r\n#! Output:\r\n#! Stack: [x_coord, y_coord, com_3, com_2, com_1, com_0]\r\n#! The share x coordinate, the share y coordinate, secret commitment \r\n#!\r\n#! Suggested Improvements:\r\n#! - Currently only takes a single field element as a random seed - should be increased to a word.\r\n#! - Migrate to a more secure random number generation algorithm for polynomial coefficient generation.\r\n#! - Allow arbitrary secret size of size n.  This would require generation of n polynomials.\r\n#! - Instead of computing x^i for each iteration, store x^i in a variable and multiply by x to get next exponent.\r\n\r\n\r\n# create secret commitment (hash of secret + rand)\r\nproc.gen_secret_com\r\n    # input: [secret, rand]\r\n    padw\r\n    push.0.0      #[0, 0, 0, 0, 0, 0, secret, rand]\r\n    hmerge        #[com_3, com_2, com_1, com_0]\r\nend\r\n\r\n# create k-1 random polynomial coefficients\r\nproc.gen_poly_coeffs\r\n    # input [k, rand]\r\n\r\n    # generate initial 4 random coefficients from rand\r\n    # coef_0 = secret\r\n    swap    #[rand, k]\r\n    padw    #[0, 0, 0, 0, rand, k]\r\n    padw    #[0, 0, 0, 0, 0, 0, 0, 0, rand, k]\r\n    drop    #[0, 0, 0, 0, 0, 0, 0, rand, k]\r\n    hmerge  #[coef_4, coef_3, coef_2, coef_1, k]\r\n\r\n    # introduce counter and evaluate if we have enough coefficients\r\n    # counter is initialized to 5 as we must account for the secret which acts as the intercept\r\n    push.5  #[counter, coef_4, coef_3, coef_2, coef_1, k]\r\n    movup.5 #[k, counter, coef_4, coef_3, coef_2, coef_1]\r\n    dup.1\r\n    dup.1\r\n    lt\r\n\r\n    # continue creating more coefficients until we have enough (created in 4's)\r\n    while.true     #[k, counter, coef_4, coef_3, coef_2, coef_1]\r\n        # generate more coefficients by padding and hashing previous coefficients\r\n        movdn.5\r\n        movdn.5\r\n        dupw       #[coef_4, coef_3, coef_2, coef_1, coef_4, coef_3, coef_2, coef_1, k, counter, ...]\r\n        padw       #[0, 0, 0, 0, coef_4, coef_3, coef_2, coef_1, coef_4, coef_3, coef_2, coef_1, k, counter]\r\n        hmerge     #[coef_8, coef_7, coef_6, coef_5, coef_4, coef_3, coef_2, coef_1, k, counter, ...]\r\n\r\n        # evaluate if we have enough coefficients\r\n        movup.9\r\n        add.4\r\n        movup.9\r\n        dup.1\r\n        dup.1\r\n        lt\r\n    end         #[k, counter, coef_(k-1), ...]\r\n    \r\n    # evaluate if we have too many coefficients\r\n    dup          #[k, k, counter, coef_(k-1), ...]\r\n    movdn.2      #[k, counter, k, coef_(k-1), ...]\r\n    sub          #[diff, k, coef_(k-1), ...]\r\n    dup          #[diff, diff, k, coef_(k-1), ...]\r\n    push.0       #[0, diff, diff, k, coef_(k-1), ...]\r\n    gt           #[1, diff, k, coef_(k-1)] \r\n\r\n    # drop unrequired coefficients such that we have k in total\r\n    while.true #[diff, k, coef_(k-1)]\r\n        movup.2\r\n        drop\r\n        sub.1\r\n        dup\r\n        push.0\r\n        gt\r\n    end\r\n\r\n    drop\r\nend\r\n\r\n# evaluate polynomial\r\nproc.eval_poly\r\n    #[x, k, coef_(k-1),...]\r\n\r\n    # introduce sum variable to calculate y\r\n    swap    #[k, x, coef_(k-1), ..., secret]\r\n    push.0  #[sum, k, x, coef_(k-1), ..., secret]\r\n    push.1  #[1, sum, k, x, coef_(k-1), ..., secret]\r\n\r\n    # evaluate polynomial by iterating through terms and summing\r\n    while.true \r\n        dup.2 #[x, sum, k, x, coef_(k-1),..., secret]\r\n        dup.2 #[k, x, sum, k, x, coef_(k-1),..., secret]\r\n        sub.1 #[k-1, x, sum, k, x, coef_(k-1),..., secret]\r\n        exp   #[x^(k-1), sum, k, x, coef_(k-1),..., secret]\r\n        movup.4 #[coef_(k-1), x^(k-1), sum, k, x,..., secret]\r\n        mul\r\n        add\r\n        swap\r\n        sub.1\r\n        dup\r\n        movdn.2\r\n        push.0\r\n        gt\r\n    end\r\n\r\n    # clean up\r\n    swap\r\n    drop\r\n    swap\r\nend\r\n\r\n\r\nbegin\r\n                                     #[x, k]\r\n    # store x in mem + fetch advice data\r\n    mem_store.0                      #[k]\r\n    adv_push.2                       #[rand, secret, k]\r\n    \r\n    # generate secret com from rand + secret\r\n    dup                              #[rand, rand, secret, k]\r\n    dup.2                            #[secret, rand, rand, secret, k]\r\n    exec.gen_secret_com              #[com_3, com_2, com_1, com_0, rand, secret, k]\r\n\r\n    # move com down stack and gen polynomial coefficients\r\n    swapw                            #[rand, secret, k, 0, com_3, com_2, com_1, com_0]\r\n    movup.2                          #[k, rand, secret, 0, com_3, com_2, com_1, com_0]\r\n    exec.gen_poly_coeffs             #[k, coef_(k-1), coef_(k-2), ..., secret, 0, com_3, com_2,com_1, com_0]\r\n\r\n    # load x from mem and generate Shamir share\r\n    mem_load.0                       #[x, k, coef_(k-1), coef_(k-2), ..., secret, 0, com_3, com_2,com_1, com_0]\r\n    exec.eval_poly                   #[x, y, 0, com_3, com_2, com_1, com_0]\r\n    movup.2\r\n    drop\r\n                                     #[x, y, com_3, com_2, com_1, com_0]\r\nend\r\n"
    },
    "/masm/standard_library": {
        "name": "standard_library",
        "type": "masm",
        "path": "/masm/standard_library",
        "content": "# This is a basic program to demonstrate using modules from the standard library.\r\n# It pushes two u64 numbers onto the stack and then adds them.\r\n# The numbers are placed on the stack by first pushing the low limb, then the high limb.\r\n\r\n# Import the u64 math module from the standard library.\r\nuse.std::math::u64\r\n\r\nbegin\r\n  # push the low limb then the high limb. b = 4294967296\r\n  push.0.1\r\n  # push the low limb then the high limb. a = 4294967299\r\n  push.3.1\r\n\r\n  # a + b = 8589934595, represented by limbs c_hi = 2 and c_lo = 3\r\n  exec.u64::checked_add\r\nend"
    },
    "/inputs/advice_provider": {
        "name": "advice_provider",
        "type": "input",
        "path": "/inputs/advice_provider",
        "content": "{\r\n    \"operand_stack\": [\"1\"],\r\n    \"advice_stack\": [\"1\", \"2\", \"3\", \"4\"],\r\n    \"advice_map\": {\r\n        \"0000000000000000000000000000000000000000000000000000000000000000\": [5, 6, 7, 8],\r\n        \"0000001000000000000000000000000000000000000000000000000000000000\": [9, 10, 11, 12],\r\n        \"0000000000000000000000000000000000000000000000000100000000000000\": [13, 14, 15, 16]\r\n    },\r\n    \"merkle_store\": [\r\n        {\"merkle_tree\": [\r\n            \"0000000000000000000000000000000000000000000000000000000000000000\", \r\n            \"0000000000000000000000000000000000000000000000000000000000000000\", \r\n            \"0000000000000000000000000000000000000000000000000000000000000000\", \r\n            \"0000000000000000000000000000000000000000000000000000000000000000\"]},\r\n        {\"sparse_merkle_tree\": [\r\n            [1, \"0000000000000000000000000000000333000000000000000000000000000000\"],\r\n            [3, \"0000000000000000000000000000000222000000000000000000000000000000\"]\r\n        ]}\r\n    ]\r\n}\r\n"
    },
    "/inputs/catalan": {
        "name": "catalan",
        "type": "input",
        "path": "/inputs/catalan",
        "content": "{\r\n    \"operand_stack\": [\"9\"]\r\n}"
    },
    "/inputs/collatz": {
        "name": "collatz",
        "type": "input",
        "path": "/inputs/collatz",
        "content": "{\r\n    \"operand_stack\": [\"0\"],\r\n    \"advice_stack\": [\"1234\"]\r\n}"
    },
    "/inputs/comparison": {
        "name": "comparison",
        "type": "input",
        "path": "/inputs/comparison",
        "content": "{\r\n    \"operand_stack\": [\"0\"],\r\n    \"advice_stack\": [\"10\"]\r\n}"
    },
    "/inputs/conditional": {
        "name": "conditional",
        "type": "input",
        "path": "/inputs/conditional",
        "content": "{\r\n    \"operand_stack\": [\"0\"],\r\n    \"advice_stack\": [\"1\"]\r\n}"
    },
    "/inputs/fibonacci": {
        "name": "fibonacci",
        "type": "input",
        "path": "/inputs/fibonacci",
        "content": "{\"operand_stack\": [\"1\"]}"
    },
    "/inputs/game_of_life_4x4": {
        "name": "game_of_life_4x4",
        "type": "input",
        "path": "/inputs/game_of_life_4x4",
        "content": "{\r\n    \"operand_stack\": [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"1\", \"0\", \"0\", \"1\", \"0\"]\r\n}"
    },
    "/inputs/greatest_common_divisor": {
        "name": "greatest_common_divisor",
        "type": "input",
        "path": "/inputs/greatest_common_divisor",
        "content": "{\r\n    \"operand_stack\": [\"12573567\", \"231654\"]\r\n}\r\n"
    },
    "/inputs/matrix_multiplication": {
        "name": "matrix_multiplication",
        "type": "input",
        "path": "/inputs/matrix_multiplication",
        "content": "{\r\n    \"operand_stack\": [],\r\n    \"advice_stack\": [\r\n        \"0\", \"0\", \"3\", \"2\", \"0\", \"0\", \"0\", \"0\",\r\n        \"0\", \"0\", \"2\", \"3\", \"0\", \"0\", \"0\", \"0\",\r\n        \"0\", \"1\", \"5\", \"7\", \"0\", \"0\", \"0\", \"0\",\r\n\r\n        \"0\", \"0\", \"4\", \"2\", \"0\", \"0\", \"0\", \"0\",\r\n        \"0\", \"0\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\",\r\n        \"0\", \"0\", \"3\", \"2\", \"0\", \"0\", \"0\", \"0\",\r\n        \"0\", \"0\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\",\r\n        \"0\", \"0\", \"3\", \"2\", \"0\", \"0\", \"0\", \"0\"\r\n    ]\r\n}\r\n"
    },
    "/inputs/merkle_inclusion": {
        "name": "merkle_inclusion",
        "type": "input",
        "path": "/inputs/merkle_inclusion",
        "content": "{\r\n    \"operand_stack\": [\"13289896116254713003\", \"7746189786889365852\", \"6635969628956095457\", \"14093615009148371008\", \"0\", \"64\"],\r\n    \"merkle_store\": [\r\n        {\"sparse_merkle_tree\": [\r\n            [0, \"0000000000000000000000000000000000000000000000000000000000000000\"],\r\n            [1, \"0000000000000000000000000000000000000000000000000100000000000000\"],\r\n            [2, \"0000000000000000000000000000000000000000000000000200000000000000\"],\r\n            [3, \"0000000000000000000000000000000000000000000000000300000000000000\"],\r\n            [4, \"0000000000000000000000000000000000000000000000000400000000000000\"],\r\n            [5, \"0000000000000000000000000000000000000000000000000500000000000000\"],\r\n            [6, \"0000000000000000000000000000000000000000000000000600000000000000\"],\r\n            [7, \"0000000000000000000000000000000000000000000000000700000000000000\"],\r\n            [8, \"0000000000000000000000000000000000000000000000000800000000000000\"],\r\n            [9, \"0000000000000000000000000000000000000000000000000900000000000000\"],\r\n            [10, \"0000000000000000000000000000000000000000000000000a00000000000000\"],\r\n            [11, \"0000000000000000000000000000000000000000000000000b00000000000000\"],\r\n            [12, \"0000000000000000000000000000000000000000000000000c00000000000000\"],\r\n            [13, \"0000000000000000000000000000000000000000000000000d00000000000000\"],\r\n            [14, \"0000000000000000000000000000000000000000000000000e00000000000000\"],\r\n            [15, \"0000000000000000000000000000000000000000000000000f00000000000000\"],\r\n            [16, \"0000000000000000000000000000000000000000000000001000000000000000\"],\r\n            [17, \"0000000000000000000000000000000000000000000000001100000000000000\"],\r\n            [18, \"0000000000000000000000000000000000000000000000001200000000000000\"],\r\n            [19, \"0000000000000000000000000000000000000000000000001300000000000000\"],\r\n            [20, \"0000000000000000000000000000000000000000000000001400000000000000\"],\r\n            [21, \"0000000000000000000000000000000000000000000000001500000000000000\"],\r\n            [22, \"0000000000000000000000000000000000000000000000001600000000000000\"],\r\n            [23, \"0000000000000000000000000000000000000000000000001700000000000000\"],\r\n            [24, \"0000000000000000000000000000000000000000000000001800000000000000\"],\r\n            [25, \"0000000000000000000000000000000000000000000000001900000000000000\"],\r\n            [26, \"0000000000000000000000000000000000000000000000001a00000000000000\"],\r\n            [27, \"0000000000000000000000000000000000000000000000001b00000000000000\"],\r\n            [28, \"0000000000000000000000000000000000000000000000001c00000000000000\"],\r\n            [29, \"0000000000000000000000000000000000000000000000001d00000000000000\"],\r\n            [30, \"0000000000000000000000000000000000000000000000001e00000000000000\"],\r\n            [31, \"0000000000000000000000000000000000000000000000001f00000000000000\"],\r\n            [32, \"0000000000000000000000000000000000000000000000002000000000000000\"],\r\n            [33, \"0000000000000000000000000000000000000000000000002100000000000000\"],\r\n            [34, \"0000000000000000000000000000000000000000000000002200000000000000\"],\r\n            [35, \"0000000000000000000000000000000000000000000000002300000000000000\"],\r\n            [36, \"0000000000000000000000000000000000000000000000002400000000000000\"],\r\n            [37, \"0000000000000000000000000000000000000000000000002500000000000000\"],\r\n            [38, \"0000000000000000000000000000000000000000000000002600000000000000\"],\r\n            [39, \"0000000000000000000000000000000000000000000000002700000000000000\"],\r\n            [40, \"0000000000000000000000000000000000000000000000002800000000000000\"],\r\n            [41, \"0000000000000000000000000000000000000000000000002900000000000000\"],\r\n            [42, \"0000000000000000000000000000000000000000000000002a00000000000000\"],\r\n            [43, \"0000000000000000000000000000000000000000000000002b00000000000000\"],\r\n            [44, \"0000000000000000000000000000000000000000000000002c00000000000000\"],\r\n            [45, \"0000000000000000000000000000000000000000000000002d00000000000000\"],\r\n            [46, \"0000000000000000000000000000000000000000000000002e00000000000000\"],\r\n            [47, \"0000000000000000000000000000000000000000000000002f00000000000000\"],\r\n            [48, \"0000000000000000000000000000000000000000000000003000000000000000\"],\r\n            [49, \"0000000000000000000000000000000000000000000000003100000000000000\"],\r\n            [50, \"0000000000000000000000000000000000000000000000003200000000000000\"],\r\n            [51, \"0000000000000000000000000000000000000000000000003300000000000000\"],\r\n            [52, \"0000000000000000000000000000000000000000000000003400000000000000\"],\r\n            [53, \"0000000000000000000000000000000000000000000000003500000000000000\"],\r\n            [54, \"0000000000000000000000000000000000000000000000003600000000000000\"],\r\n            [55, \"0000000000000000000000000000000000000000000000003700000000000000\"],\r\n            [56, \"0000000000000000000000000000000000000000000000003800000000000000\"],\r\n            [57, \"0000000000000000000000000000000000000000000000003900000000000000\"],\r\n            [58, \"0000000000000000000000000000000000000000000000003a00000000000000\"],\r\n            [59, \"0000000000000000000000000000000000000000000000003b00000000000000\"],\r\n            [60, \"0000000000000000000000000000000000000000000000003c00000000000000\"],\r\n            [61, \"0000000000000000000000000000000000000000000000003d00000000000000\"],\r\n            [62, \"0000000000000000000000000000000000000000000000003e00000000000000\"],\r\n            [63, \"0000000000000000000000000000000000000000000000003f00000000000000\"],\r\n            [64, \"0000000000000000000000000000000000000000000000004000000000000000\"],\r\n            [65, \"0000000000000000000000000000000000000000000000004100000000000000\"],\r\n            [66, \"0000000000000000000000000000000000000000000000004200000000000000\"],\r\n            [67, \"0000000000000000000000000000000000000000000000004300000000000000\"],\r\n            [68, \"0000000000000000000000000000000000000000000000004400000000000000\"],\r\n            [69, \"0000000000000000000000000000000000000000000000004500000000000000\"],\r\n            [70, \"0000000000000000000000000000000000000000000000004600000000000000\"],\r\n            [71, \"0000000000000000000000000000000000000000000000004700000000000000\"],\r\n            [72, \"0000000000000000000000000000000000000000000000004800000000000000\"],\r\n            [73, \"0000000000000000000000000000000000000000000000004900000000000000\"],\r\n            [74, \"0000000000000000000000000000000000000000000000004a00000000000000\"],\r\n            [75, \"0000000000000000000000000000000000000000000000004b00000000000000\"],\r\n            [76, \"0000000000000000000000000000000000000000000000004c00000000000000\"],\r\n            [77, \"0000000000000000000000000000000000000000000000004d00000000000000\"],\r\n            [78, \"0000000000000000000000000000000000000000000000004e00000000000000\"],\r\n            [79, \"0000000000000000000000000000000000000000000000004f00000000000000\"],\r\n            [80, \"0000000000000000000000000000000000000000000000005000000000000000\"],\r\n            [81, \"0000000000000000000000000000000000000000000000005100000000000000\"],\r\n            [82, \"0000000000000000000000000000000000000000000000005200000000000000\"],\r\n            [83, \"0000000000000000000000000000000000000000000000005300000000000000\"],\r\n            [84, \"0000000000000000000000000000000000000000000000005400000000000000\"],\r\n            [85, \"0000000000000000000000000000000000000000000000005500000000000000\"],\r\n            [86, \"0000000000000000000000000000000000000000000000005600000000000000\"],\r\n            [87, \"0000000000000000000000000000000000000000000000005700000000000000\"],\r\n            [88, \"0000000000000000000000000000000000000000000000005800000000000000\"],\r\n            [89, \"0000000000000000000000000000000000000000000000005900000000000000\"],\r\n            [90, \"0000000000000000000000000000000000000000000000005a00000000000000\"],\r\n            [91, \"0000000000000000000000000000000000000000000000005b00000000000000\"],\r\n            [92, \"0000000000000000000000000000000000000000000000005c00000000000000\"],\r\n            [93, \"0000000000000000000000000000000000000000000000005d00000000000000\"],\r\n            [94, \"0000000000000000000000000000000000000000000000005e00000000000000\"],\r\n            [95, \"0000000000000000000000000000000000000000000000005f00000000000000\"],\r\n            [96, \"0000000000000000000000000000000000000000000000006000000000000000\"],\r\n            [97, \"0000000000000000000000000000000000000000000000006100000000000000\"],\r\n            [98, \"0000000000000000000000000000000000000000000000006200000000000000\"],\r\n            [99, \"0000000000000000000000000000000000000000000000006300000000000000\"],\r\n            [100, \"0000000000000000000000000000000000000000000000006400000000000000\"],\r\n            [101, \"0000000000000000000000000000000000000000000000006500000000000000\"],\r\n            [102, \"0000000000000000000000000000000000000000000000006600000000000000\"],\r\n            [103, \"0000000000000000000000000000000000000000000000006700000000000000\"],\r\n            [104, \"0000000000000000000000000000000000000000000000006800000000000000\"],\r\n            [105, \"0000000000000000000000000000000000000000000000006900000000000000\"],\r\n            [106, \"0000000000000000000000000000000000000000000000006a00000000000000\"],\r\n            [107, \"0000000000000000000000000000000000000000000000006b00000000000000\"],\r\n            [108, \"0000000000000000000000000000000000000000000000006c00000000000000\"],\r\n            [109, \"0000000000000000000000000000000000000000000000006d00000000000000\"],\r\n            [110, \"0000000000000000000000000000000000000000000000006e00000000000000\"],\r\n            [111, \"0000000000000000000000000000000000000000000000006f00000000000000\"],\r\n            [112, \"0000000000000000000000000000000000000000000000007000000000000000\"],\r\n            [113, \"0000000000000000000000000000000000000000000000007100000000000000\"],\r\n            [114, \"0000000000000000000000000000000000000000000000007200000000000000\"],\r\n            [115, \"0000000000000000000000000000000000000000000000007300000000000000\"],\r\n            [116, \"0000000000000000000000000000000000000000000000007400000000000000\"],\r\n            [117, \"0000000000000000000000000000000000000000000000007500000000000000\"],\r\n            [118, \"0000000000000000000000000000000000000000000000007600000000000000\"],\r\n            [119, \"0000000000000000000000000000000000000000000000007700000000000000\"],\r\n            [120, \"0000000000000000000000000000000000000000000000007800000000000000\"],\r\n            [121, \"0000000000000000000000000000000000000000000000007900000000000000\"],\r\n            [122, \"0000000000000000000000000000000000000000000000007a00000000000000\"],\r\n            [123, \"0000000000000000000000000000000000000000000000007b00000000000000\"],\r\n            [124, \"0000000000000000000000000000000000000000000000007c00000000000000\"],\r\n            [125, \"0000000000000000000000000000000000000000000000007d00000000000000\"],\r\n            [126, \"0000000000000000000000000000000000000000000000007e00000000000000\"],\r\n            [127, \"0000000000000000000000000000000000000000000000007f00000000000000\"],\r\n            [128, \"0000000000000000000000000000000000000000000000008000000000000000\"],\r\n            [129, \"0000000000000000000000000000000000000000000000008100000000000000\"],\r\n            [130, \"0000000000000000000000000000000000000000000000008200000000000000\"],\r\n            [131, \"0000000000000000000000000000000000000000000000008300000000000000\"],\r\n            [132, \"0000000000000000000000000000000000000000000000008400000000000000\"],\r\n            [133, \"0000000000000000000000000000000000000000000000008500000000000000\"],\r\n            [134, \"0000000000000000000000000000000000000000000000008600000000000000\"],\r\n            [135, \"0000000000000000000000000000000000000000000000008700000000000000\"],\r\n            [136, \"0000000000000000000000000000000000000000000000008800000000000000\"],\r\n            [137, \"0000000000000000000000000000000000000000000000008900000000000000\"],\r\n            [138, \"0000000000000000000000000000000000000000000000008a00000000000000\"],\r\n            [139, \"0000000000000000000000000000000000000000000000008b00000000000000\"],\r\n            [140, \"0000000000000000000000000000000000000000000000008c00000000000000\"],\r\n            [141, \"0000000000000000000000000000000000000000000000008d00000000000000\"],\r\n            [142, \"0000000000000000000000000000000000000000000000008e00000000000000\"],\r\n            [143, \"0000000000000000000000000000000000000000000000008f00000000000000\"],\r\n            [144, \"0000000000000000000000000000000000000000000000009000000000000000\"],\r\n            [145, \"0000000000000000000000000000000000000000000000009100000000000000\"],\r\n            [146, \"0000000000000000000000000000000000000000000000009200000000000000\"],\r\n            [147, \"0000000000000000000000000000000000000000000000009300000000000000\"],\r\n            [148, \"0000000000000000000000000000000000000000000000009400000000000000\"],\r\n            [149, \"0000000000000000000000000000000000000000000000009500000000000000\"],\r\n            [150, \"0000000000000000000000000000000000000000000000009600000000000000\"],\r\n            [151, \"0000000000000000000000000000000000000000000000009700000000000000\"],\r\n            [152, \"0000000000000000000000000000000000000000000000009800000000000000\"],\r\n            [153, \"0000000000000000000000000000000000000000000000009900000000000000\"],\r\n            [154, \"0000000000000000000000000000000000000000000000009a00000000000000\"],\r\n            [155, \"0000000000000000000000000000000000000000000000009b00000000000000\"],\r\n            [156, \"0000000000000000000000000000000000000000000000009c00000000000000\"],\r\n            [157, \"0000000000000000000000000000000000000000000000009d00000000000000\"],\r\n            [158, \"0000000000000000000000000000000000000000000000009e00000000000000\"],\r\n            [159, \"0000000000000000000000000000000000000000000000009f00000000000000\"],\r\n            [160, \"000000000000000000000000000000000000000000000000a000000000000000\"],\r\n            [161, \"000000000000000000000000000000000000000000000000a100000000000000\"],\r\n            [162, \"000000000000000000000000000000000000000000000000a200000000000000\"],\r\n            [163, \"000000000000000000000000000000000000000000000000a300000000000000\"],\r\n            [164, \"000000000000000000000000000000000000000000000000a400000000000000\"],\r\n            [165, \"000000000000000000000000000000000000000000000000a500000000000000\"],\r\n            [166, \"000000000000000000000000000000000000000000000000a600000000000000\"],\r\n            [167, \"000000000000000000000000000000000000000000000000a700000000000000\"],\r\n            [168, \"000000000000000000000000000000000000000000000000a800000000000000\"],\r\n            [169, \"000000000000000000000000000000000000000000000000a900000000000000\"],\r\n            [170, \"000000000000000000000000000000000000000000000000aa00000000000000\"],\r\n            [171, \"000000000000000000000000000000000000000000000000ab00000000000000\"],\r\n            [172, \"000000000000000000000000000000000000000000000000ac00000000000000\"],\r\n            [173, \"000000000000000000000000000000000000000000000000ad00000000000000\"],\r\n            [174, \"000000000000000000000000000000000000000000000000ae00000000000000\"],\r\n            [175, \"000000000000000000000000000000000000000000000000af00000000000000\"],\r\n            [176, \"000000000000000000000000000000000000000000000000b000000000000000\"],\r\n            [177, \"000000000000000000000000000000000000000000000000b100000000000000\"],\r\n            [178, \"000000000000000000000000000000000000000000000000b200000000000000\"],\r\n            [179, \"000000000000000000000000000000000000000000000000b300000000000000\"],\r\n            [180, \"000000000000000000000000000000000000000000000000b400000000000000\"],\r\n            [181, \"000000000000000000000000000000000000000000000000b500000000000000\"],\r\n            [182, \"000000000000000000000000000000000000000000000000b600000000000000\"],\r\n            [183, \"000000000000000000000000000000000000000000000000b700000000000000\"],\r\n            [184, \"000000000000000000000000000000000000000000000000b800000000000000\"],\r\n            [185, \"000000000000000000000000000000000000000000000000b900000000000000\"],\r\n            [186, \"000000000000000000000000000000000000000000000000ba00000000000000\"],\r\n            [187, \"000000000000000000000000000000000000000000000000bb00000000000000\"],\r\n            [188, \"000000000000000000000000000000000000000000000000bc00000000000000\"],\r\n            [189, \"000000000000000000000000000000000000000000000000bd00000000000000\"],\r\n            [190, \"000000000000000000000000000000000000000000000000be00000000000000\"],\r\n            [191, \"000000000000000000000000000000000000000000000000bf00000000000000\"],\r\n            [192, \"000000000000000000000000000000000000000000000000c000000000000000\"],\r\n            [193, \"000000000000000000000000000000000000000000000000c100000000000000\"],\r\n            [194, \"000000000000000000000000000000000000000000000000c200000000000000\"],\r\n            [195, \"000000000000000000000000000000000000000000000000c300000000000000\"],\r\n            [196, \"000000000000000000000000000000000000000000000000c400000000000000\"],\r\n            [197, \"000000000000000000000000000000000000000000000000c500000000000000\"],\r\n            [198, \"000000000000000000000000000000000000000000000000c600000000000000\"],\r\n            [199, \"000000000000000000000000000000000000000000000000c700000000000000\"],\r\n            [200, \"000000000000000000000000000000000000000000000000c800000000000000\"],\r\n            [201, \"000000000000000000000000000000000000000000000000c900000000000000\"],\r\n            [202, \"000000000000000000000000000000000000000000000000ca00000000000000\"],\r\n            [203, \"000000000000000000000000000000000000000000000000cb00000000000000\"],\r\n            [204, \"000000000000000000000000000000000000000000000000cc00000000000000\"],\r\n            [205, \"000000000000000000000000000000000000000000000000cd00000000000000\"],\r\n            [206, \"000000000000000000000000000000000000000000000000ce00000000000000\"],\r\n            [207, \"000000000000000000000000000000000000000000000000cf00000000000000\"],\r\n            [208, \"000000000000000000000000000000000000000000000000d000000000000000\"],\r\n            [209, \"000000000000000000000000000000000000000000000000d100000000000000\"],\r\n            [210, \"000000000000000000000000000000000000000000000000d200000000000000\"],\r\n            [211, \"000000000000000000000000000000000000000000000000d300000000000000\"],\r\n            [212, \"000000000000000000000000000000000000000000000000d400000000000000\"],\r\n            [213, \"000000000000000000000000000000000000000000000000d500000000000000\"],\r\n            [214, \"000000000000000000000000000000000000000000000000d600000000000000\"],\r\n            [215, \"000000000000000000000000000000000000000000000000d700000000000000\"],\r\n            [216, \"000000000000000000000000000000000000000000000000d800000000000000\"],\r\n            [217, \"000000000000000000000000000000000000000000000000d900000000000000\"],\r\n            [218, \"000000000000000000000000000000000000000000000000da00000000000000\"],\r\n            [219, \"000000000000000000000000000000000000000000000000db00000000000000\"],\r\n            [220, \"000000000000000000000000000000000000000000000000dc00000000000000\"],\r\n            [221, \"000000000000000000000000000000000000000000000000dd00000000000000\"],\r\n            [222, \"000000000000000000000000000000000000000000000000de00000000000000\"],\r\n            [223, \"000000000000000000000000000000000000000000000000df00000000000000\"],\r\n            [224, \"000000000000000000000000000000000000000000000000e000000000000000\"],\r\n            [225, \"000000000000000000000000000000000000000000000000e100000000000000\"],\r\n            [226, \"000000000000000000000000000000000000000000000000e200000000000000\"],\r\n            [227, \"000000000000000000000000000000000000000000000000e300000000000000\"],\r\n            [228, \"000000000000000000000000000000000000000000000000e400000000000000\"],\r\n            [229, \"000000000000000000000000000000000000000000000000e500000000000000\"],\r\n            [230, \"000000000000000000000000000000000000000000000000e600000000000000\"],\r\n            [231, \"000000000000000000000000000000000000000000000000e700000000000000\"],\r\n            [232, \"000000000000000000000000000000000000000000000000e800000000000000\"],\r\n            [233, \"000000000000000000000000000000000000000000000000e900000000000000\"],\r\n            [234, \"000000000000000000000000000000000000000000000000ea00000000000000\"],\r\n            [235, \"000000000000000000000000000000000000000000000000eb00000000000000\"],\r\n            [236, \"000000000000000000000000000000000000000000000000ec00000000000000\"],\r\n            [237, \"000000000000000000000000000000000000000000000000ed00000000000000\"],\r\n            [238, \"000000000000000000000000000000000000000000000000ee00000000000000\"],\r\n            [239, \"000000000000000000000000000000000000000000000000ef00000000000000\"],\r\n            [240, \"000000000000000000000000000000000000000000000000f000000000000000\"],\r\n            [241, \"000000000000000000000000000000000000000000000000f100000000000000\"],\r\n            [242, \"000000000000000000000000000000000000000000000000f200000000000000\"],\r\n            [243, \"000000000000000000000000000000000000000000000000f300000000000000\"],\r\n            [244, \"000000000000000000000000000000000000000000000000f400000000000000\"],\r\n            [245, \"000000000000000000000000000000000000000000000000f500000000000000\"],\r\n            [246, \"000000000000000000000000000000000000000000000000f600000000000000\"],\r\n            [247, \"000000000000000000000000000000000000000000000000f700000000000000\"],\r\n            [248, \"000000000000000000000000000000000000000000000000f800000000000000\"],\r\n            [249, \"000000000000000000000000000000000000000000000000f900000000000000\"],\r\n            [250, \"000000000000000000000000000000000000000000000000fa00000000000000\"],\r\n            [251, \"000000000000000000000000000000000000000000000000fb00000000000000\"],\r\n            [252, \"000000000000000000000000000000000000000000000000fc00000000000000\"],\r\n            [253, \"000000000000000000000000000000000000000000000000fd00000000000000\"],\r\n            [254, \"000000000000000000000000000000000000000000000000fe00000000000000\"],\r\n            [255, \"000000000000000000000000000000000000000000000000ff00000000000000\"],\r\n            [256, \"0000000000000000000000000000000000000000000000000001000000000000\"],\r\n            [257, \"0000000000000000000000000000000000000000000000000101000000000000\"],\r\n            [258, \"0000000000000000000000000000000000000000000000000201000000000000\"],\r\n            [259, \"0000000000000000000000000000000000000000000000000301000000000000\"],\r\n            [260, \"0000000000000000000000000000000000000000000000000401000000000000\"],\r\n            [261, \"0000000000000000000000000000000000000000000000000501000000000000\"],\r\n            [262, \"0000000000000000000000000000000000000000000000000601000000000000\"],\r\n            [263, \"0000000000000000000000000000000000000000000000000701000000000000\"],\r\n            [264, \"0000000000000000000000000000000000000000000000000801000000000000\"],\r\n            [265, \"0000000000000000000000000000000000000000000000000901000000000000\"],\r\n            [266, \"0000000000000000000000000000000000000000000000000a01000000000000\"],\r\n            [267, \"0000000000000000000000000000000000000000000000000b01000000000000\"],\r\n            [268, \"0000000000000000000000000000000000000000000000000c01000000000000\"],\r\n            [269, \"0000000000000000000000000000000000000000000000000d01000000000000\"],\r\n            [270, \"0000000000000000000000000000000000000000000000000e01000000000000\"],\r\n            [271, \"0000000000000000000000000000000000000000000000000f01000000000000\"],\r\n            [272, \"0000000000000000000000000000000000000000000000001001000000000000\"],\r\n            [273, \"0000000000000000000000000000000000000000000000001101000000000000\"],\r\n            [274, \"0000000000000000000000000000000000000000000000001201000000000000\"],\r\n            [275, \"0000000000000000000000000000000000000000000000001301000000000000\"],\r\n            [276, \"0000000000000000000000000000000000000000000000001401000000000000\"],\r\n            [277, \"0000000000000000000000000000000000000000000000001501000000000000\"],\r\n            [278, \"0000000000000000000000000000000000000000000000001601000000000000\"],\r\n            [279, \"0000000000000000000000000000000000000000000000001701000000000000\"],\r\n            [280, \"0000000000000000000000000000000000000000000000001801000000000000\"],\r\n            [281, \"0000000000000000000000000000000000000000000000001901000000000000\"],\r\n            [282, \"0000000000000000000000000000000000000000000000001a01000000000000\"],\r\n            [283, \"0000000000000000000000000000000000000000000000001b01000000000000\"],\r\n            [284, \"0000000000000000000000000000000000000000000000001c01000000000000\"],\r\n            [285, \"0000000000000000000000000000000000000000000000001d01000000000000\"],\r\n            [286, \"0000000000000000000000000000000000000000000000001e01000000000000\"],\r\n            [287, \"0000000000000000000000000000000000000000000000001f01000000000000\"],\r\n            [288, \"0000000000000000000000000000000000000000000000002001000000000000\"],\r\n            [289, \"0000000000000000000000000000000000000000000000002101000000000000\"],\r\n            [290, \"0000000000000000000000000000000000000000000000002201000000000000\"],\r\n            [291, \"0000000000000000000000000000000000000000000000002301000000000000\"],\r\n            [292, \"0000000000000000000000000000000000000000000000002401000000000000\"],\r\n            [293, \"0000000000000000000000000000000000000000000000002501000000000000\"],\r\n            [294, \"0000000000000000000000000000000000000000000000002601000000000000\"],\r\n            [295, \"0000000000000000000000000000000000000000000000002701000000000000\"],\r\n            [296, \"0000000000000000000000000000000000000000000000002801000000000000\"],\r\n            [297, \"0000000000000000000000000000000000000000000000002901000000000000\"],\r\n            [298, \"0000000000000000000000000000000000000000000000002a01000000000000\"],\r\n            [299, \"0000000000000000000000000000000000000000000000002b01000000000000\"],\r\n            [300, \"0000000000000000000000000000000000000000000000002c01000000000000\"],\r\n            [301, \"0000000000000000000000000000000000000000000000002d01000000000000\"],\r\n            [302, \"0000000000000000000000000000000000000000000000002e01000000000000\"],\r\n            [303, \"0000000000000000000000000000000000000000000000002f01000000000000\"],\r\n            [304, \"0000000000000000000000000000000000000000000000003001000000000000\"],\r\n            [305, \"0000000000000000000000000000000000000000000000003101000000000000\"],\r\n            [306, \"0000000000000000000000000000000000000000000000003201000000000000\"],\r\n            [307, \"0000000000000000000000000000000000000000000000003301000000000000\"],\r\n            [308, \"0000000000000000000000000000000000000000000000003401000000000000\"],\r\n            [309, \"0000000000000000000000000000000000000000000000003501000000000000\"],\r\n            [310, \"0000000000000000000000000000000000000000000000003601000000000000\"],\r\n            [311, \"0000000000000000000000000000000000000000000000003701000000000000\"],\r\n            [312, \"0000000000000000000000000000000000000000000000003801000000000000\"],\r\n            [313, \"0000000000000000000000000000000000000000000000003901000000000000\"],\r\n            [314, \"0000000000000000000000000000000000000000000000003a01000000000000\"],\r\n            [315, \"0000000000000000000000000000000000000000000000003b01000000000000\"],\r\n            [316, \"0000000000000000000000000000000000000000000000003c01000000000000\"],\r\n            [317, \"0000000000000000000000000000000000000000000000003d01000000000000\"],\r\n            [318, \"0000000000000000000000000000000000000000000000003e01000000000000\"],\r\n            [319, \"0000000000000000000000000000000000000000000000003f01000000000000\"],\r\n            [320, \"0000000000000000000000000000000000000000000000004001000000000000\"],\r\n            [321, \"0000000000000000000000000000000000000000000000004101000000000000\"],\r\n            [322, \"0000000000000000000000000000000000000000000000004201000000000000\"],\r\n            [323, \"0000000000000000000000000000000000000000000000004301000000000000\"],\r\n            [324, \"0000000000000000000000000000000000000000000000004401000000000000\"],\r\n            [325, \"0000000000000000000000000000000000000000000000004501000000000000\"],\r\n            [326, \"0000000000000000000000000000000000000000000000004601000000000000\"],\r\n            [327, \"0000000000000000000000000000000000000000000000004701000000000000\"],\r\n            [328, \"0000000000000000000000000000000000000000000000004801000000000000\"],\r\n            [329, \"0000000000000000000000000000000000000000000000004901000000000000\"],\r\n            [330, \"0000000000000000000000000000000000000000000000004a01000000000000\"],\r\n            [331, \"0000000000000000000000000000000000000000000000004b01000000000000\"],\r\n            [332, \"0000000000000000000000000000000000000000000000004c01000000000000\"],\r\n            [333, \"0000000000000000000000000000000000000000000000004d01000000000000\"],\r\n            [334, \"0000000000000000000000000000000000000000000000004e01000000000000\"],\r\n            [335, \"0000000000000000000000000000000000000000000000004f01000000000000\"],\r\n            [336, \"0000000000000000000000000000000000000000000000005001000000000000\"],\r\n            [337, \"0000000000000000000000000000000000000000000000005101000000000000\"],\r\n            [338, \"0000000000000000000000000000000000000000000000005201000000000000\"],\r\n            [339, \"0000000000000000000000000000000000000000000000005301000000000000\"],\r\n            [340, \"0000000000000000000000000000000000000000000000005401000000000000\"],\r\n            [341, \"0000000000000000000000000000000000000000000000005501000000000000\"],\r\n            [342, \"0000000000000000000000000000000000000000000000005601000000000000\"],\r\n            [343, \"0000000000000000000000000000000000000000000000005701000000000000\"],\r\n            [344, \"0000000000000000000000000000000000000000000000005801000000000000\"],\r\n            [345, \"0000000000000000000000000000000000000000000000005901000000000000\"],\r\n            [346, \"0000000000000000000000000000000000000000000000005a01000000000000\"],\r\n            [347, \"0000000000000000000000000000000000000000000000005b01000000000000\"],\r\n            [348, \"0000000000000000000000000000000000000000000000005c01000000000000\"],\r\n            [349, \"0000000000000000000000000000000000000000000000005d01000000000000\"],\r\n            [350, \"0000000000000000000000000000000000000000000000005e01000000000000\"],\r\n            [351, \"0000000000000000000000000000000000000000000000005f01000000000000\"],\r\n            [352, \"0000000000000000000000000000000000000000000000006001000000000000\"],\r\n            [353, \"0000000000000000000000000000000000000000000000006101000000000000\"],\r\n            [354, \"0000000000000000000000000000000000000000000000006201000000000000\"],\r\n            [355, \"0000000000000000000000000000000000000000000000006301000000000000\"],\r\n            [356, \"0000000000000000000000000000000000000000000000006401000000000000\"],\r\n            [357, \"0000000000000000000000000000000000000000000000006501000000000000\"],\r\n            [358, \"0000000000000000000000000000000000000000000000006601000000000000\"],\r\n            [359, \"0000000000000000000000000000000000000000000000006701000000000000\"],\r\n            [360, \"0000000000000000000000000000000000000000000000006801000000000000\"],\r\n            [361, \"0000000000000000000000000000000000000000000000006901000000000000\"],\r\n            [362, \"0000000000000000000000000000000000000000000000006a01000000000000\"],\r\n            [363, \"0000000000000000000000000000000000000000000000006b01000000000000\"],\r\n            [364, \"0000000000000000000000000000000000000000000000006c01000000000000\"],\r\n            [365, \"0000000000000000000000000000000000000000000000006d01000000000000\"],\r\n            [366, \"0000000000000000000000000000000000000000000000006e01000000000000\"],\r\n            [367, \"0000000000000000000000000000000000000000000000006f01000000000000\"],\r\n            [368, \"0000000000000000000000000000000000000000000000007001000000000000\"],\r\n            [369, \"0000000000000000000000000000000000000000000000007101000000000000\"],\r\n            [370, \"0000000000000000000000000000000000000000000000007201000000000000\"],\r\n            [371, \"0000000000000000000000000000000000000000000000007301000000000000\"],\r\n            [372, \"0000000000000000000000000000000000000000000000007401000000000000\"],\r\n            [373, \"0000000000000000000000000000000000000000000000007501000000000000\"],\r\n            [374, \"0000000000000000000000000000000000000000000000007601000000000000\"],\r\n            [375, \"0000000000000000000000000000000000000000000000007701000000000000\"],\r\n            [376, \"0000000000000000000000000000000000000000000000007801000000000000\"],\r\n            [377, \"0000000000000000000000000000000000000000000000007901000000000000\"],\r\n            [378, \"0000000000000000000000000000000000000000000000007a01000000000000\"],\r\n            [379, \"0000000000000000000000000000000000000000000000007b01000000000000\"],\r\n            [380, \"0000000000000000000000000000000000000000000000007c01000000000000\"],\r\n            [381, \"0000000000000000000000000000000000000000000000007d01000000000000\"],\r\n            [382, \"0000000000000000000000000000000000000000000000007e01000000000000\"],\r\n            [383, \"0000000000000000000000000000000000000000000000007f01000000000000\"],\r\n            [384, \"0000000000000000000000000000000000000000000000008001000000000000\"],\r\n            [385, \"0000000000000000000000000000000000000000000000008101000000000000\"],\r\n            [386, \"0000000000000000000000000000000000000000000000008201000000000000\"],\r\n            [387, \"0000000000000000000000000000000000000000000000008301000000000000\"],\r\n            [388, \"0000000000000000000000000000000000000000000000008401000000000000\"],\r\n            [389, \"0000000000000000000000000000000000000000000000008501000000000000\"],\r\n            [390, \"0000000000000000000000000000000000000000000000008601000000000000\"],\r\n            [391, \"0000000000000000000000000000000000000000000000008701000000000000\"],\r\n            [392, \"0000000000000000000000000000000000000000000000008801000000000000\"],\r\n            [393, \"0000000000000000000000000000000000000000000000008901000000000000\"],\r\n            [394, \"0000000000000000000000000000000000000000000000008a01000000000000\"],\r\n            [395, \"0000000000000000000000000000000000000000000000008b01000000000000\"],\r\n            [396, \"0000000000000000000000000000000000000000000000008c01000000000000\"],\r\n            [397, \"0000000000000000000000000000000000000000000000008d01000000000000\"],\r\n            [398, \"0000000000000000000000000000000000000000000000008e01000000000000\"],\r\n            [399, \"0000000000000000000000000000000000000000000000008f01000000000000\"],\r\n            [400, \"0000000000000000000000000000000000000000000000009001000000000000\"],\r\n            [401, \"0000000000000000000000000000000000000000000000009101000000000000\"],\r\n            [402, \"0000000000000000000000000000000000000000000000009201000000000000\"],\r\n            [403, \"0000000000000000000000000000000000000000000000009301000000000000\"],\r\n            [404, \"0000000000000000000000000000000000000000000000009401000000000000\"],\r\n            [405, \"0000000000000000000000000000000000000000000000009501000000000000\"],\r\n            [406, \"0000000000000000000000000000000000000000000000009601000000000000\"],\r\n            [407, \"0000000000000000000000000000000000000000000000009701000000000000\"],\r\n            [408, \"0000000000000000000000000000000000000000000000009801000000000000\"],\r\n            [409, \"0000000000000000000000000000000000000000000000009901000000000000\"],\r\n            [410, \"0000000000000000000000000000000000000000000000009a01000000000000\"],\r\n            [411, \"0000000000000000000000000000000000000000000000009b01000000000000\"],\r\n            [412, \"0000000000000000000000000000000000000000000000009c01000000000000\"],\r\n            [413, \"0000000000000000000000000000000000000000000000009d01000000000000\"],\r\n            [414, \"0000000000000000000000000000000000000000000000009e01000000000000\"],\r\n            [415, \"0000000000000000000000000000000000000000000000009f01000000000000\"],\r\n            [416, \"000000000000000000000000000000000000000000000000a001000000000000\"],\r\n            [417, \"000000000000000000000000000000000000000000000000a101000000000000\"],\r\n            [418, \"000000000000000000000000000000000000000000000000a201000000000000\"],\r\n            [419, \"000000000000000000000000000000000000000000000000a301000000000000\"],\r\n            [420, \"000000000000000000000000000000000000000000000000a401000000000000\"],\r\n            [421, \"000000000000000000000000000000000000000000000000a501000000000000\"],\r\n            [422, \"000000000000000000000000000000000000000000000000a601000000000000\"],\r\n            [423, \"000000000000000000000000000000000000000000000000a701000000000000\"],\r\n            [424, \"000000000000000000000000000000000000000000000000a801000000000000\"],\r\n            [425, \"000000000000000000000000000000000000000000000000a901000000000000\"],\r\n            [426, \"000000000000000000000000000000000000000000000000aa01000000000000\"],\r\n            [427, \"000000000000000000000000000000000000000000000000ab01000000000000\"],\r\n            [428, \"000000000000000000000000000000000000000000000000ac01000000000000\"],\r\n            [429, \"000000000000000000000000000000000000000000000000ad01000000000000\"],\r\n            [430, \"000000000000000000000000000000000000000000000000ae01000000000000\"],\r\n            [431, \"000000000000000000000000000000000000000000000000af01000000000000\"],\r\n            [432, \"000000000000000000000000000000000000000000000000b001000000000000\"],\r\n            [433, \"000000000000000000000000000000000000000000000000b101000000000000\"],\r\n            [434, \"000000000000000000000000000000000000000000000000b201000000000000\"],\r\n            [435, \"000000000000000000000000000000000000000000000000b301000000000000\"],\r\n            [436, \"000000000000000000000000000000000000000000000000b401000000000000\"],\r\n            [437, \"000000000000000000000000000000000000000000000000b501000000000000\"],\r\n            [438, \"000000000000000000000000000000000000000000000000b601000000000000\"],\r\n            [439, \"000000000000000000000000000000000000000000000000b701000000000000\"],\r\n            [440, \"000000000000000000000000000000000000000000000000b801000000000000\"],\r\n            [441, \"000000000000000000000000000000000000000000000000b901000000000000\"],\r\n            [442, \"000000000000000000000000000000000000000000000000ba01000000000000\"],\r\n            [443, \"000000000000000000000000000000000000000000000000bb01000000000000\"],\r\n            [444, \"000000000000000000000000000000000000000000000000bc01000000000000\"],\r\n            [445, \"000000000000000000000000000000000000000000000000bd01000000000000\"],\r\n            [446, \"000000000000000000000000000000000000000000000000be01000000000000\"],\r\n            [447, \"000000000000000000000000000000000000000000000000bf01000000000000\"],\r\n            [448, \"000000000000000000000000000000000000000000000000c001000000000000\"],\r\n            [449, \"000000000000000000000000000000000000000000000000c101000000000000\"],\r\n            [450, \"000000000000000000000000000000000000000000000000c201000000000000\"],\r\n            [451, \"000000000000000000000000000000000000000000000000c301000000000000\"],\r\n            [452, \"000000000000000000000000000000000000000000000000c401000000000000\"],\r\n            [453, \"000000000000000000000000000000000000000000000000c501000000000000\"],\r\n            [454, \"000000000000000000000000000000000000000000000000c601000000000000\"],\r\n            [455, \"000000000000000000000000000000000000000000000000c701000000000000\"],\r\n            [456, \"000000000000000000000000000000000000000000000000c801000000000000\"],\r\n            [457, \"000000000000000000000000000000000000000000000000c901000000000000\"],\r\n            [458, \"000000000000000000000000000000000000000000000000ca01000000000000\"],\r\n            [459, \"000000000000000000000000000000000000000000000000cb01000000000000\"],\r\n            [460, \"000000000000000000000000000000000000000000000000cc01000000000000\"],\r\n            [461, \"000000000000000000000000000000000000000000000000cd01000000000000\"],\r\n            [462, \"000000000000000000000000000000000000000000000000ce01000000000000\"],\r\n            [463, \"000000000000000000000000000000000000000000000000cf01000000000000\"],\r\n            [464, \"000000000000000000000000000000000000000000000000d001000000000000\"],\r\n            [465, \"000000000000000000000000000000000000000000000000d101000000000000\"],\r\n            [466, \"000000000000000000000000000000000000000000000000d201000000000000\"],\r\n            [467, \"000000000000000000000000000000000000000000000000d301000000000000\"],\r\n            [468, \"000000000000000000000000000000000000000000000000d401000000000000\"],\r\n            [469, \"000000000000000000000000000000000000000000000000d501000000000000\"],\r\n            [470, \"000000000000000000000000000000000000000000000000d601000000000000\"],\r\n            [471, \"000000000000000000000000000000000000000000000000d701000000000000\"],\r\n            [472, \"000000000000000000000000000000000000000000000000d801000000000000\"],\r\n            [473, \"000000000000000000000000000000000000000000000000d901000000000000\"],\r\n            [474, \"000000000000000000000000000000000000000000000000da01000000000000\"],\r\n            [475, \"000000000000000000000000000000000000000000000000db01000000000000\"],\r\n            [476, \"000000000000000000000000000000000000000000000000dc01000000000000\"],\r\n            [477, \"000000000000000000000000000000000000000000000000dd01000000000000\"],\r\n            [478, \"000000000000000000000000000000000000000000000000de01000000000000\"],\r\n            [479, \"000000000000000000000000000000000000000000000000df01000000000000\"],\r\n            [480, \"000000000000000000000000000000000000000000000000e001000000000000\"],\r\n            [481, \"000000000000000000000000000000000000000000000000e101000000000000\"],\r\n            [482, \"000000000000000000000000000000000000000000000000e201000000000000\"],\r\n            [483, \"000000000000000000000000000000000000000000000000e301000000000000\"],\r\n            [484, \"000000000000000000000000000000000000000000000000e401000000000000\"],\r\n            [485, \"000000000000000000000000000000000000000000000000e501000000000000\"],\r\n            [486, \"000000000000000000000000000000000000000000000000e601000000000000\"],\r\n            [487, \"000000000000000000000000000000000000000000000000e701000000000000\"],\r\n            [488, \"000000000000000000000000000000000000000000000000e801000000000000\"],\r\n            [489, \"000000000000000000000000000000000000000000000000e901000000000000\"],\r\n            [490, \"000000000000000000000000000000000000000000000000ea01000000000000\"],\r\n            [491, \"000000000000000000000000000000000000000000000000eb01000000000000\"],\r\n            [492, \"000000000000000000000000000000000000000000000000ec01000000000000\"],\r\n            [493, \"000000000000000000000000000000000000000000000000ed01000000000000\"],\r\n            [494, \"000000000000000000000000000000000000000000000000ee01000000000000\"],\r\n            [495, \"000000000000000000000000000000000000000000000000ef01000000000000\"],\r\n            [496, \"000000000000000000000000000000000000000000000000f001000000000000\"],\r\n            [497, \"000000000000000000000000000000000000000000000000f101000000000000\"],\r\n            [498, \"000000000000000000000000000000000000000000000000f201000000000000\"],\r\n            [499, \"000000000000000000000000000000000000000000000000f301000000000000\"],\r\n            [500, \"000000000000000000000000000000000000000000000000f401000000000000\"],\r\n            [501, \"000000000000000000000000000000000000000000000000f501000000000000\"],\r\n            [502, \"000000000000000000000000000000000000000000000000f601000000000000\"],\r\n            [503, \"000000000000000000000000000000000000000000000000f701000000000000\"],\r\n            [504, \"000000000000000000000000000000000000000000000000f801000000000000\"],\r\n            [505, \"000000000000000000000000000000000000000000000000f901000000000000\"],\r\n            [506, \"000000000000000000000000000000000000000000000000fa01000000000000\"],\r\n            [507, \"000000000000000000000000000000000000000000000000fb01000000000000\"],\r\n            [508, \"000000000000000000000000000000000000000000000000fc01000000000000\"],\r\n            [509, \"000000000000000000000000000000000000000000000000fd01000000000000\"],\r\n            [510, \"000000000000000000000000000000000000000000000000fe01000000000000\"],\r\n            [511, \"000000000000000000000000000000000000000000000000ff01000000000000\"],\r\n            [512, \"0000000000000000000000000000000000000000000000000002000000000000\"],\r\n            [513, \"0000000000000000000000000000000000000000000000000102000000000000\"],\r\n            [514, \"0000000000000000000000000000000000000000000000000202000000000000\"],\r\n            [515, \"0000000000000000000000000000000000000000000000000302000000000000\"],\r\n            [516, \"0000000000000000000000000000000000000000000000000402000000000000\"],\r\n            [517, \"0000000000000000000000000000000000000000000000000502000000000000\"],\r\n            [518, \"0000000000000000000000000000000000000000000000000602000000000000\"],\r\n            [519, \"0000000000000000000000000000000000000000000000000702000000000000\"],\r\n            [520, \"0000000000000000000000000000000000000000000000000802000000000000\"],\r\n            [521, \"0000000000000000000000000000000000000000000000000902000000000000\"],\r\n            [522, \"0000000000000000000000000000000000000000000000000a02000000000000\"],\r\n            [523, \"0000000000000000000000000000000000000000000000000b02000000000000\"],\r\n            [524, \"0000000000000000000000000000000000000000000000000c02000000000000\"],\r\n            [525, \"0000000000000000000000000000000000000000000000000d02000000000000\"],\r\n            [526, \"0000000000000000000000000000000000000000000000000e02000000000000\"],\r\n            [527, \"0000000000000000000000000000000000000000000000000f02000000000000\"],\r\n            [528, \"0000000000000000000000000000000000000000000000001002000000000000\"],\r\n            [529, \"0000000000000000000000000000000000000000000000001102000000000000\"],\r\n            [530, \"0000000000000000000000000000000000000000000000001202000000000000\"],\r\n            [531, \"0000000000000000000000000000000000000000000000001302000000000000\"],\r\n            [532, \"0000000000000000000000000000000000000000000000001402000000000000\"],\r\n            [533, \"0000000000000000000000000000000000000000000000001502000000000000\"],\r\n            [534, \"0000000000000000000000000000000000000000000000001602000000000000\"],\r\n            [535, \"0000000000000000000000000000000000000000000000001702000000000000\"],\r\n            [536, \"0000000000000000000000000000000000000000000000001802000000000000\"],\r\n            [537, \"0000000000000000000000000000000000000000000000001902000000000000\"],\r\n            [538, \"0000000000000000000000000000000000000000000000001a02000000000000\"],\r\n            [539, \"0000000000000000000000000000000000000000000000001b02000000000000\"],\r\n            [540, \"0000000000000000000000000000000000000000000000001c02000000000000\"],\r\n            [541, \"0000000000000000000000000000000000000000000000001d02000000000000\"],\r\n            [542, \"0000000000000000000000000000000000000000000000001e02000000000000\"],\r\n            [543, \"0000000000000000000000000000000000000000000000001f02000000000000\"],\r\n            [544, \"0000000000000000000000000000000000000000000000002002000000000000\"],\r\n            [545, \"0000000000000000000000000000000000000000000000002102000000000000\"],\r\n            [546, \"0000000000000000000000000000000000000000000000002202000000000000\"],\r\n            [547, \"0000000000000000000000000000000000000000000000002302000000000000\"],\r\n            [548, \"0000000000000000000000000000000000000000000000002402000000000000\"],\r\n            [549, \"0000000000000000000000000000000000000000000000002502000000000000\"],\r\n            [550, \"0000000000000000000000000000000000000000000000002602000000000000\"],\r\n            [551, \"0000000000000000000000000000000000000000000000002702000000000000\"],\r\n            [552, \"0000000000000000000000000000000000000000000000002802000000000000\"],\r\n            [553, \"0000000000000000000000000000000000000000000000002902000000000000\"],\r\n            [554, \"0000000000000000000000000000000000000000000000002a02000000000000\"],\r\n            [555, \"0000000000000000000000000000000000000000000000002b02000000000000\"],\r\n            [556, \"0000000000000000000000000000000000000000000000002c02000000000000\"],\r\n            [557, \"0000000000000000000000000000000000000000000000002d02000000000000\"],\r\n            [558, \"0000000000000000000000000000000000000000000000002e02000000000000\"],\r\n            [559, \"0000000000000000000000000000000000000000000000002f02000000000000\"],\r\n            [560, \"0000000000000000000000000000000000000000000000003002000000000000\"],\r\n            [561, \"0000000000000000000000000000000000000000000000003102000000000000\"],\r\n            [562, \"0000000000000000000000000000000000000000000000003202000000000000\"],\r\n            [563, \"0000000000000000000000000000000000000000000000003302000000000000\"],\r\n            [564, \"0000000000000000000000000000000000000000000000003402000000000000\"],\r\n            [565, \"0000000000000000000000000000000000000000000000003502000000000000\"],\r\n            [566, \"0000000000000000000000000000000000000000000000003602000000000000\"],\r\n            [567, \"0000000000000000000000000000000000000000000000003702000000000000\"],\r\n            [568, \"0000000000000000000000000000000000000000000000003802000000000000\"],\r\n            [569, \"0000000000000000000000000000000000000000000000003902000000000000\"],\r\n            [570, \"0000000000000000000000000000000000000000000000003a02000000000000\"],\r\n            [571, \"0000000000000000000000000000000000000000000000003b02000000000000\"],\r\n            [572, \"0000000000000000000000000000000000000000000000003c02000000000000\"],\r\n            [573, \"0000000000000000000000000000000000000000000000003d02000000000000\"],\r\n            [574, \"0000000000000000000000000000000000000000000000003e02000000000000\"],\r\n            [575, \"0000000000000000000000000000000000000000000000003f02000000000000\"],\r\n            [576, \"0000000000000000000000000000000000000000000000004002000000000000\"],\r\n            [577, \"0000000000000000000000000000000000000000000000004102000000000000\"],\r\n            [578, \"0000000000000000000000000000000000000000000000004202000000000000\"],\r\n            [579, \"0000000000000000000000000000000000000000000000004302000000000000\"],\r\n            [580, \"0000000000000000000000000000000000000000000000004402000000000000\"],\r\n            [581, \"0000000000000000000000000000000000000000000000004502000000000000\"],\r\n            [582, \"0000000000000000000000000000000000000000000000004602000000000000\"],\r\n            [583, \"0000000000000000000000000000000000000000000000004702000000000000\"],\r\n            [584, \"0000000000000000000000000000000000000000000000004802000000000000\"],\r\n            [585, \"0000000000000000000000000000000000000000000000004902000000000000\"],\r\n            [586, \"0000000000000000000000000000000000000000000000004a02000000000000\"],\r\n            [587, \"0000000000000000000000000000000000000000000000004b02000000000000\"],\r\n            [588, \"0000000000000000000000000000000000000000000000004c02000000000000\"],\r\n            [589, \"0000000000000000000000000000000000000000000000004d02000000000000\"],\r\n            [590, \"0000000000000000000000000000000000000000000000004e02000000000000\"],\r\n            [591, \"0000000000000000000000000000000000000000000000004f02000000000000\"],\r\n            [592, \"0000000000000000000000000000000000000000000000005002000000000000\"],\r\n            [593, \"0000000000000000000000000000000000000000000000005102000000000000\"],\r\n            [594, \"0000000000000000000000000000000000000000000000005202000000000000\"],\r\n            [595, \"0000000000000000000000000000000000000000000000005302000000000000\"],\r\n            [596, \"0000000000000000000000000000000000000000000000005402000000000000\"],\r\n            [597, \"0000000000000000000000000000000000000000000000005502000000000000\"],\r\n            [598, \"0000000000000000000000000000000000000000000000005602000000000000\"],\r\n            [599, \"0000000000000000000000000000000000000000000000005702000000000000\"],\r\n            [600, \"0000000000000000000000000000000000000000000000005802000000000000\"],\r\n            [601, \"0000000000000000000000000000000000000000000000005902000000000000\"],\r\n            [602, \"0000000000000000000000000000000000000000000000005a02000000000000\"],\r\n            [603, \"0000000000000000000000000000000000000000000000005b02000000000000\"],\r\n            [604, \"0000000000000000000000000000000000000000000000005c02000000000000\"],\r\n            [605, \"0000000000000000000000000000000000000000000000005d02000000000000\"],\r\n            [606, \"0000000000000000000000000000000000000000000000005e02000000000000\"],\r\n            [607, \"0000000000000000000000000000000000000000000000005f02000000000000\"],\r\n            [608, \"0000000000000000000000000000000000000000000000006002000000000000\"],\r\n            [609, \"0000000000000000000000000000000000000000000000006102000000000000\"],\r\n            [610, \"0000000000000000000000000000000000000000000000006202000000000000\"],\r\n            [611, \"0000000000000000000000000000000000000000000000006302000000000000\"],\r\n            [612, \"0000000000000000000000000000000000000000000000006402000000000000\"],\r\n            [613, \"0000000000000000000000000000000000000000000000006502000000000000\"],\r\n            [614, \"0000000000000000000000000000000000000000000000006602000000000000\"],\r\n            [615, \"0000000000000000000000000000000000000000000000006702000000000000\"],\r\n            [616, \"0000000000000000000000000000000000000000000000006802000000000000\"],\r\n            [617, \"0000000000000000000000000000000000000000000000006902000000000000\"],\r\n            [618, \"0000000000000000000000000000000000000000000000006a02000000000000\"],\r\n            [619, \"0000000000000000000000000000000000000000000000006b02000000000000\"],\r\n            [620, \"0000000000000000000000000000000000000000000000006c02000000000000\"],\r\n            [621, \"0000000000000000000000000000000000000000000000006d02000000000000\"],\r\n            [622, \"0000000000000000000000000000000000000000000000006e02000000000000\"],\r\n            [623, \"0000000000000000000000000000000000000000000000006f02000000000000\"],\r\n            [624, \"0000000000000000000000000000000000000000000000007002000000000000\"],\r\n            [625, \"0000000000000000000000000000000000000000000000007102000000000000\"],\r\n            [626, \"0000000000000000000000000000000000000000000000007202000000000000\"],\r\n            [627, \"0000000000000000000000000000000000000000000000007302000000000000\"],\r\n            [628, \"0000000000000000000000000000000000000000000000007402000000000000\"],\r\n            [629, \"0000000000000000000000000000000000000000000000007502000000000000\"],\r\n            [630, \"0000000000000000000000000000000000000000000000007602000000000000\"],\r\n            [631, \"0000000000000000000000000000000000000000000000007702000000000000\"],\r\n            [632, \"0000000000000000000000000000000000000000000000007802000000000000\"],\r\n            [633, \"0000000000000000000000000000000000000000000000007902000000000000\"],\r\n            [634, \"0000000000000000000000000000000000000000000000007a02000000000000\"],\r\n            [635, \"0000000000000000000000000000000000000000000000007b02000000000000\"],\r\n            [636, \"0000000000000000000000000000000000000000000000007c02000000000000\"],\r\n            [637, \"0000000000000000000000000000000000000000000000007d02000000000000\"],\r\n            [638, \"0000000000000000000000000000000000000000000000007e02000000000000\"],\r\n            [639, \"0000000000000000000000000000000000000000000000007f02000000000000\"],\r\n            [640, \"0000000000000000000000000000000000000000000000008002000000000000\"],\r\n            [641, \"0000000000000000000000000000000000000000000000008102000000000000\"],\r\n            [642, \"0000000000000000000000000000000000000000000000008202000000000000\"],\r\n            [643, \"0000000000000000000000000000000000000000000000008302000000000000\"],\r\n            [644, \"0000000000000000000000000000000000000000000000008402000000000000\"],\r\n            [645, \"0000000000000000000000000000000000000000000000008502000000000000\"],\r\n            [646, \"0000000000000000000000000000000000000000000000008602000000000000\"],\r\n            [647, \"0000000000000000000000000000000000000000000000008702000000000000\"],\r\n            [648, \"0000000000000000000000000000000000000000000000008802000000000000\"],\r\n            [649, \"0000000000000000000000000000000000000000000000008902000000000000\"],\r\n            [650, \"0000000000000000000000000000000000000000000000008a02000000000000\"],\r\n            [651, \"0000000000000000000000000000000000000000000000008b02000000000000\"],\r\n            [652, \"0000000000000000000000000000000000000000000000008c02000000000000\"],\r\n            [653, \"0000000000000000000000000000000000000000000000008d02000000000000\"],\r\n            [654, \"0000000000000000000000000000000000000000000000008e02000000000000\"],\r\n            [655, \"0000000000000000000000000000000000000000000000008f02000000000000\"],\r\n            [656, \"0000000000000000000000000000000000000000000000009002000000000000\"],\r\n            [657, \"0000000000000000000000000000000000000000000000009102000000000000\"],\r\n            [658, \"0000000000000000000000000000000000000000000000009202000000000000\"],\r\n            [659, \"0000000000000000000000000000000000000000000000009302000000000000\"],\r\n            [660, \"0000000000000000000000000000000000000000000000009402000000000000\"],\r\n            [661, \"0000000000000000000000000000000000000000000000009502000000000000\"],\r\n            [662, \"0000000000000000000000000000000000000000000000009602000000000000\"],\r\n            [663, \"0000000000000000000000000000000000000000000000009702000000000000\"],\r\n            [664, \"0000000000000000000000000000000000000000000000009802000000000000\"],\r\n            [665, \"0000000000000000000000000000000000000000000000009902000000000000\"],\r\n            [666, \"0000000000000000000000000000000000000000000000009a02000000000000\"],\r\n            [667, \"0000000000000000000000000000000000000000000000009b02000000000000\"],\r\n            [668, \"0000000000000000000000000000000000000000000000009c02000000000000\"],\r\n            [669, \"0000000000000000000000000000000000000000000000009d02000000000000\"],\r\n            [670, \"0000000000000000000000000000000000000000000000009e02000000000000\"],\r\n            [671, \"0000000000000000000000000000000000000000000000009f02000000000000\"],\r\n            [672, \"000000000000000000000000000000000000000000000000a002000000000000\"],\r\n            [673, \"000000000000000000000000000000000000000000000000a102000000000000\"],\r\n            [674, \"000000000000000000000000000000000000000000000000a202000000000000\"],\r\n            [675, \"000000000000000000000000000000000000000000000000a302000000000000\"],\r\n            [676, \"000000000000000000000000000000000000000000000000a402000000000000\"],\r\n            [677, \"000000000000000000000000000000000000000000000000a502000000000000\"],\r\n            [678, \"000000000000000000000000000000000000000000000000a602000000000000\"],\r\n            [679, \"000000000000000000000000000000000000000000000000a702000000000000\"],\r\n            [680, \"000000000000000000000000000000000000000000000000a802000000000000\"],\r\n            [681, \"000000000000000000000000000000000000000000000000a902000000000000\"],\r\n            [682, \"000000000000000000000000000000000000000000000000aa02000000000000\"],\r\n            [683, \"000000000000000000000000000000000000000000000000ab02000000000000\"],\r\n            [684, \"000000000000000000000000000000000000000000000000ac02000000000000\"],\r\n            [685, \"000000000000000000000000000000000000000000000000ad02000000000000\"],\r\n            [686, \"000000000000000000000000000000000000000000000000ae02000000000000\"],\r\n            [687, \"000000000000000000000000000000000000000000000000af02000000000000\"],\r\n            [688, \"000000000000000000000000000000000000000000000000b002000000000000\"],\r\n            [689, \"000000000000000000000000000000000000000000000000b102000000000000\"],\r\n            [690, \"000000000000000000000000000000000000000000000000b202000000000000\"],\r\n            [691, \"000000000000000000000000000000000000000000000000b302000000000000\"],\r\n            [692, \"000000000000000000000000000000000000000000000000b402000000000000\"],\r\n            [693, \"000000000000000000000000000000000000000000000000b502000000000000\"],\r\n            [694, \"000000000000000000000000000000000000000000000000b602000000000000\"],\r\n            [695, \"000000000000000000000000000000000000000000000000b702000000000000\"],\r\n            [696, \"000000000000000000000000000000000000000000000000b802000000000000\"],\r\n            [697, \"000000000000000000000000000000000000000000000000b902000000000000\"],\r\n            [698, \"000000000000000000000000000000000000000000000000ba02000000000000\"],\r\n            [699, \"000000000000000000000000000000000000000000000000bb02000000000000\"],\r\n            [700, \"000000000000000000000000000000000000000000000000bc02000000000000\"],\r\n            [701, \"000000000000000000000000000000000000000000000000bd02000000000000\"],\r\n            [702, \"000000000000000000000000000000000000000000000000be02000000000000\"],\r\n            [703, \"000000000000000000000000000000000000000000000000bf02000000000000\"],\r\n            [704, \"000000000000000000000000000000000000000000000000c002000000000000\"],\r\n            [705, \"000000000000000000000000000000000000000000000000c102000000000000\"],\r\n            [706, \"000000000000000000000000000000000000000000000000c202000000000000\"],\r\n            [707, \"000000000000000000000000000000000000000000000000c302000000000000\"],\r\n            [708, \"000000000000000000000000000000000000000000000000c402000000000000\"],\r\n            [709, \"000000000000000000000000000000000000000000000000c502000000000000\"],\r\n            [710, \"000000000000000000000000000000000000000000000000c602000000000000\"],\r\n            [711, \"000000000000000000000000000000000000000000000000c702000000000000\"],\r\n            [712, \"000000000000000000000000000000000000000000000000c802000000000000\"],\r\n            [713, \"000000000000000000000000000000000000000000000000c902000000000000\"],\r\n            [714, \"000000000000000000000000000000000000000000000000ca02000000000000\"],\r\n            [715, \"000000000000000000000000000000000000000000000000cb02000000000000\"],\r\n            [716, \"000000000000000000000000000000000000000000000000cc02000000000000\"],\r\n            [717, \"000000000000000000000000000000000000000000000000cd02000000000000\"],\r\n            [718, \"000000000000000000000000000000000000000000000000ce02000000000000\"],\r\n            [719, \"000000000000000000000000000000000000000000000000cf02000000000000\"],\r\n            [720, \"000000000000000000000000000000000000000000000000d002000000000000\"],\r\n            [721, \"000000000000000000000000000000000000000000000000d102000000000000\"],\r\n            [722, \"000000000000000000000000000000000000000000000000d202000000000000\"],\r\n            [723, \"000000000000000000000000000000000000000000000000d302000000000000\"],\r\n            [724, \"000000000000000000000000000000000000000000000000d402000000000000\"],\r\n            [725, \"000000000000000000000000000000000000000000000000d502000000000000\"],\r\n            [726, \"000000000000000000000000000000000000000000000000d602000000000000\"],\r\n            [727, \"000000000000000000000000000000000000000000000000d702000000000000\"],\r\n            [728, \"000000000000000000000000000000000000000000000000d802000000000000\"],\r\n            [729, \"000000000000000000000000000000000000000000000000d902000000000000\"],\r\n            [730, \"000000000000000000000000000000000000000000000000da02000000000000\"],\r\n            [731, \"000000000000000000000000000000000000000000000000db02000000000000\"],\r\n            [732, \"000000000000000000000000000000000000000000000000dc02000000000000\"],\r\n            [733, \"000000000000000000000000000000000000000000000000dd02000000000000\"],\r\n            [734, \"000000000000000000000000000000000000000000000000de02000000000000\"],\r\n            [735, \"000000000000000000000000000000000000000000000000df02000000000000\"],\r\n            [736, \"000000000000000000000000000000000000000000000000e002000000000000\"],\r\n            [737, \"000000000000000000000000000000000000000000000000e102000000000000\"],\r\n            [738, \"000000000000000000000000000000000000000000000000e202000000000000\"],\r\n            [739, \"000000000000000000000000000000000000000000000000e302000000000000\"],\r\n            [740, \"000000000000000000000000000000000000000000000000e402000000000000\"],\r\n            [741, \"000000000000000000000000000000000000000000000000e502000000000000\"],\r\n            [742, \"000000000000000000000000000000000000000000000000e602000000000000\"],\r\n            [743, \"000000000000000000000000000000000000000000000000e702000000000000\"],\r\n            [744, \"000000000000000000000000000000000000000000000000e802000000000000\"],\r\n            [745, \"000000000000000000000000000000000000000000000000e902000000000000\"],\r\n            [746, \"000000000000000000000000000000000000000000000000ea02000000000000\"],\r\n            [747, \"000000000000000000000000000000000000000000000000eb02000000000000\"],\r\n            [748, \"000000000000000000000000000000000000000000000000ec02000000000000\"],\r\n            [749, \"000000000000000000000000000000000000000000000000ed02000000000000\"],\r\n            [750, \"000000000000000000000000000000000000000000000000ee02000000000000\"],\r\n            [751, \"000000000000000000000000000000000000000000000000ef02000000000000\"],\r\n            [752, \"000000000000000000000000000000000000000000000000f002000000000000\"],\r\n            [753, \"000000000000000000000000000000000000000000000000f102000000000000\"],\r\n            [754, \"000000000000000000000000000000000000000000000000f202000000000000\"],\r\n            [755, \"000000000000000000000000000000000000000000000000f302000000000000\"],\r\n            [756, \"000000000000000000000000000000000000000000000000f402000000000000\"],\r\n            [757, \"000000000000000000000000000000000000000000000000f502000000000000\"],\r\n            [758, \"000000000000000000000000000000000000000000000000f602000000000000\"],\r\n            [759, \"000000000000000000000000000000000000000000000000f702000000000000\"],\r\n            [760, \"000000000000000000000000000000000000000000000000f802000000000000\"],\r\n            [761, \"000000000000000000000000000000000000000000000000f902000000000000\"],\r\n            [762, \"000000000000000000000000000000000000000000000000fa02000000000000\"],\r\n            [763, \"000000000000000000000000000000000000000000000000fb02000000000000\"],\r\n            [764, \"000000000000000000000000000000000000000000000000fc02000000000000\"],\r\n            [765, \"000000000000000000000000000000000000000000000000fd02000000000000\"],\r\n            [766, \"000000000000000000000000000000000000000000000000fe02000000000000\"],\r\n            [767, \"000000000000000000000000000000000000000000000000ff02000000000000\"],\r\n            [768, \"0000000000000000000000000000000000000000000000000003000000000000\"],\r\n            [769, \"0000000000000000000000000000000000000000000000000103000000000000\"],\r\n            [770, \"0000000000000000000000000000000000000000000000000203000000000000\"],\r\n            [771, \"0000000000000000000000000000000000000000000000000303000000000000\"],\r\n            [772, \"0000000000000000000000000000000000000000000000000403000000000000\"],\r\n            [773, \"0000000000000000000000000000000000000000000000000503000000000000\"],\r\n            [774, \"0000000000000000000000000000000000000000000000000603000000000000\"],\r\n            [775, \"0000000000000000000000000000000000000000000000000703000000000000\"],\r\n            [776, \"0000000000000000000000000000000000000000000000000803000000000000\"],\r\n            [777, \"0000000000000000000000000000000000000000000000000903000000000000\"],\r\n            [778, \"0000000000000000000000000000000000000000000000000a03000000000000\"],\r\n            [779, \"0000000000000000000000000000000000000000000000000b03000000000000\"],\r\n            [780, \"0000000000000000000000000000000000000000000000000c03000000000000\"],\r\n            [781, \"0000000000000000000000000000000000000000000000000d03000000000000\"],\r\n            [782, \"0000000000000000000000000000000000000000000000000e03000000000000\"],\r\n            [783, \"0000000000000000000000000000000000000000000000000f03000000000000\"],\r\n            [784, \"0000000000000000000000000000000000000000000000001003000000000000\"],\r\n            [785, \"0000000000000000000000000000000000000000000000001103000000000000\"],\r\n            [786, \"0000000000000000000000000000000000000000000000001203000000000000\"],\r\n            [787, \"0000000000000000000000000000000000000000000000001303000000000000\"],\r\n            [788, \"0000000000000000000000000000000000000000000000001403000000000000\"],\r\n            [789, \"0000000000000000000000000000000000000000000000001503000000000000\"],\r\n            [790, \"0000000000000000000000000000000000000000000000001603000000000000\"],\r\n            [791, \"0000000000000000000000000000000000000000000000001703000000000000\"],\r\n            [792, \"0000000000000000000000000000000000000000000000001803000000000000\"],\r\n            [793, \"0000000000000000000000000000000000000000000000001903000000000000\"],\r\n            [794, \"0000000000000000000000000000000000000000000000001a03000000000000\"],\r\n            [795, \"0000000000000000000000000000000000000000000000001b03000000000000\"],\r\n            [796, \"0000000000000000000000000000000000000000000000001c03000000000000\"],\r\n            [797, \"0000000000000000000000000000000000000000000000001d03000000000000\"],\r\n            [798, \"0000000000000000000000000000000000000000000000001e03000000000000\"],\r\n            [799, \"0000000000000000000000000000000000000000000000001f03000000000000\"],\r\n            [800, \"0000000000000000000000000000000000000000000000002003000000000000\"],\r\n            [801, \"0000000000000000000000000000000000000000000000002103000000000000\"],\r\n            [802, \"0000000000000000000000000000000000000000000000002203000000000000\"],\r\n            [803, \"0000000000000000000000000000000000000000000000002303000000000000\"],\r\n            [804, \"0000000000000000000000000000000000000000000000002403000000000000\"],\r\n            [805, \"0000000000000000000000000000000000000000000000002503000000000000\"],\r\n            [806, \"0000000000000000000000000000000000000000000000002603000000000000\"],\r\n            [807, \"0000000000000000000000000000000000000000000000002703000000000000\"],\r\n            [808, \"0000000000000000000000000000000000000000000000002803000000000000\"],\r\n            [809, \"0000000000000000000000000000000000000000000000002903000000000000\"],\r\n            [810, \"0000000000000000000000000000000000000000000000002a03000000000000\"],\r\n            [811, \"0000000000000000000000000000000000000000000000002b03000000000000\"],\r\n            [812, \"0000000000000000000000000000000000000000000000002c03000000000000\"],\r\n            [813, \"0000000000000000000000000000000000000000000000002d03000000000000\"],\r\n            [814, \"0000000000000000000000000000000000000000000000002e03000000000000\"],\r\n            [815, \"0000000000000000000000000000000000000000000000002f03000000000000\"],\r\n            [816, \"0000000000000000000000000000000000000000000000003003000000000000\"],\r\n            [817, \"0000000000000000000000000000000000000000000000003103000000000000\"],\r\n            [818, \"0000000000000000000000000000000000000000000000003203000000000000\"],\r\n            [819, \"0000000000000000000000000000000000000000000000003303000000000000\"],\r\n            [820, \"0000000000000000000000000000000000000000000000003403000000000000\"],\r\n            [821, \"0000000000000000000000000000000000000000000000003503000000000000\"],\r\n            [822, \"0000000000000000000000000000000000000000000000003603000000000000\"],\r\n            [823, \"0000000000000000000000000000000000000000000000003703000000000000\"],\r\n            [824, \"0000000000000000000000000000000000000000000000003803000000000000\"],\r\n            [825, \"0000000000000000000000000000000000000000000000003903000000000000\"],\r\n            [826, \"0000000000000000000000000000000000000000000000003a03000000000000\"],\r\n            [827, \"0000000000000000000000000000000000000000000000003b03000000000000\"],\r\n            [828, \"0000000000000000000000000000000000000000000000003c03000000000000\"],\r\n            [829, \"0000000000000000000000000000000000000000000000003d03000000000000\"],\r\n            [830, \"0000000000000000000000000000000000000000000000003e03000000000000\"],\r\n            [831, \"0000000000000000000000000000000000000000000000003f03000000000000\"],\r\n            [832, \"0000000000000000000000000000000000000000000000004003000000000000\"],\r\n            [833, \"0000000000000000000000000000000000000000000000004103000000000000\"],\r\n            [834, \"0000000000000000000000000000000000000000000000004203000000000000\"],\r\n            [835, \"0000000000000000000000000000000000000000000000004303000000000000\"],\r\n            [836, \"0000000000000000000000000000000000000000000000004403000000000000\"],\r\n            [837, \"0000000000000000000000000000000000000000000000004503000000000000\"],\r\n            [838, \"0000000000000000000000000000000000000000000000004603000000000000\"],\r\n            [839, \"0000000000000000000000000000000000000000000000004703000000000000\"],\r\n            [840, \"0000000000000000000000000000000000000000000000004803000000000000\"],\r\n            [841, \"0000000000000000000000000000000000000000000000004903000000000000\"],\r\n            [842, \"0000000000000000000000000000000000000000000000004a03000000000000\"],\r\n            [843, \"0000000000000000000000000000000000000000000000004b03000000000000\"],\r\n            [844, \"0000000000000000000000000000000000000000000000004c03000000000000\"],\r\n            [845, \"0000000000000000000000000000000000000000000000004d03000000000000\"],\r\n            [846, \"0000000000000000000000000000000000000000000000004e03000000000000\"],\r\n            [847, \"0000000000000000000000000000000000000000000000004f03000000000000\"],\r\n            [848, \"0000000000000000000000000000000000000000000000005003000000000000\"],\r\n            [849, \"0000000000000000000000000000000000000000000000005103000000000000\"],\r\n            [850, \"0000000000000000000000000000000000000000000000005203000000000000\"],\r\n            [851, \"0000000000000000000000000000000000000000000000005303000000000000\"],\r\n            [852, \"0000000000000000000000000000000000000000000000005403000000000000\"],\r\n            [853, \"0000000000000000000000000000000000000000000000005503000000000000\"],\r\n            [854, \"0000000000000000000000000000000000000000000000005603000000000000\"],\r\n            [855, \"0000000000000000000000000000000000000000000000005703000000000000\"],\r\n            [856, \"0000000000000000000000000000000000000000000000005803000000000000\"],\r\n            [857, \"0000000000000000000000000000000000000000000000005903000000000000\"],\r\n            [858, \"0000000000000000000000000000000000000000000000005a03000000000000\"],\r\n            [859, \"0000000000000000000000000000000000000000000000005b03000000000000\"],\r\n            [860, \"0000000000000000000000000000000000000000000000005c03000000000000\"],\r\n            [861, \"0000000000000000000000000000000000000000000000005d03000000000000\"],\r\n            [862, \"0000000000000000000000000000000000000000000000005e03000000000000\"],\r\n            [863, \"0000000000000000000000000000000000000000000000005f03000000000000\"],\r\n            [864, \"0000000000000000000000000000000000000000000000006003000000000000\"],\r\n            [865, \"0000000000000000000000000000000000000000000000006103000000000000\"],\r\n            [866, \"0000000000000000000000000000000000000000000000006203000000000000\"],\r\n            [867, \"0000000000000000000000000000000000000000000000006303000000000000\"],\r\n            [868, \"0000000000000000000000000000000000000000000000006403000000000000\"],\r\n            [869, \"0000000000000000000000000000000000000000000000006503000000000000\"],\r\n            [870, \"0000000000000000000000000000000000000000000000006603000000000000\"],\r\n            [871, \"0000000000000000000000000000000000000000000000006703000000000000\"],\r\n            [872, \"0000000000000000000000000000000000000000000000006803000000000000\"],\r\n            [873, \"0000000000000000000000000000000000000000000000006903000000000000\"],\r\n            [874, \"0000000000000000000000000000000000000000000000006a03000000000000\"],\r\n            [875, \"0000000000000000000000000000000000000000000000006b03000000000000\"],\r\n            [876, \"0000000000000000000000000000000000000000000000006c03000000000000\"],\r\n            [877, \"0000000000000000000000000000000000000000000000006d03000000000000\"],\r\n            [878, \"0000000000000000000000000000000000000000000000006e03000000000000\"],\r\n            [879, \"0000000000000000000000000000000000000000000000006f03000000000000\"],\r\n            [880, \"0000000000000000000000000000000000000000000000007003000000000000\"],\r\n            [881, \"0000000000000000000000000000000000000000000000007103000000000000\"],\r\n            [882, \"0000000000000000000000000000000000000000000000007203000000000000\"],\r\n            [883, \"0000000000000000000000000000000000000000000000007303000000000000\"],\r\n            [884, \"0000000000000000000000000000000000000000000000007403000000000000\"],\r\n            [885, \"0000000000000000000000000000000000000000000000007503000000000000\"],\r\n            [886, \"0000000000000000000000000000000000000000000000007603000000000000\"],\r\n            [887, \"0000000000000000000000000000000000000000000000007703000000000000\"],\r\n            [888, \"0000000000000000000000000000000000000000000000007803000000000000\"],\r\n            [889, \"0000000000000000000000000000000000000000000000007903000000000000\"],\r\n            [890, \"0000000000000000000000000000000000000000000000007a03000000000000\"],\r\n            [891, \"0000000000000000000000000000000000000000000000007b03000000000000\"],\r\n            [892, \"0000000000000000000000000000000000000000000000007c03000000000000\"],\r\n            [893, \"0000000000000000000000000000000000000000000000007d03000000000000\"],\r\n            [894, \"0000000000000000000000000000000000000000000000007e03000000000000\"],\r\n            [895, \"0000000000000000000000000000000000000000000000007f03000000000000\"],\r\n            [896, \"0000000000000000000000000000000000000000000000008003000000000000\"],\r\n            [897, \"0000000000000000000000000000000000000000000000008103000000000000\"],\r\n            [898, \"0000000000000000000000000000000000000000000000008203000000000000\"],\r\n            [899, \"0000000000000000000000000000000000000000000000008303000000000000\"],\r\n            [900, \"0000000000000000000000000000000000000000000000008403000000000000\"],\r\n            [901, \"0000000000000000000000000000000000000000000000008503000000000000\"],\r\n            [902, \"0000000000000000000000000000000000000000000000008603000000000000\"],\r\n            [903, \"0000000000000000000000000000000000000000000000008703000000000000\"],\r\n            [904, \"0000000000000000000000000000000000000000000000008803000000000000\"],\r\n            [905, \"0000000000000000000000000000000000000000000000008903000000000000\"],\r\n            [906, \"0000000000000000000000000000000000000000000000008a03000000000000\"],\r\n            [907, \"0000000000000000000000000000000000000000000000008b03000000000000\"],\r\n            [908, \"0000000000000000000000000000000000000000000000008c03000000000000\"],\r\n            [909, \"0000000000000000000000000000000000000000000000008d03000000000000\"],\r\n            [910, \"0000000000000000000000000000000000000000000000008e03000000000000\"],\r\n            [911, \"0000000000000000000000000000000000000000000000008f03000000000000\"],\r\n            [912, \"0000000000000000000000000000000000000000000000009003000000000000\"],\r\n            [913, \"0000000000000000000000000000000000000000000000009103000000000000\"],\r\n            [914, \"0000000000000000000000000000000000000000000000009203000000000000\"],\r\n            [915, \"0000000000000000000000000000000000000000000000009303000000000000\"],\r\n            [916, \"0000000000000000000000000000000000000000000000009403000000000000\"],\r\n            [917, \"0000000000000000000000000000000000000000000000009503000000000000\"],\r\n            [918, \"0000000000000000000000000000000000000000000000009603000000000000\"],\r\n            [919, \"0000000000000000000000000000000000000000000000009703000000000000\"],\r\n            [920, \"0000000000000000000000000000000000000000000000009803000000000000\"],\r\n            [921, \"0000000000000000000000000000000000000000000000009903000000000000\"],\r\n            [922, \"0000000000000000000000000000000000000000000000009a03000000000000\"],\r\n            [923, \"0000000000000000000000000000000000000000000000009b03000000000000\"],\r\n            [924, \"0000000000000000000000000000000000000000000000009c03000000000000\"],\r\n            [925, \"0000000000000000000000000000000000000000000000009d03000000000000\"],\r\n            [926, \"0000000000000000000000000000000000000000000000009e03000000000000\"],\r\n            [927, \"0000000000000000000000000000000000000000000000009f03000000000000\"],\r\n            [928, \"000000000000000000000000000000000000000000000000a003000000000000\"],\r\n            [929, \"000000000000000000000000000000000000000000000000a103000000000000\"],\r\n            [930, \"000000000000000000000000000000000000000000000000a203000000000000\"],\r\n            [931, \"000000000000000000000000000000000000000000000000a303000000000000\"],\r\n            [932, \"000000000000000000000000000000000000000000000000a403000000000000\"],\r\n            [933, \"000000000000000000000000000000000000000000000000a503000000000000\"],\r\n            [934, \"000000000000000000000000000000000000000000000000a603000000000000\"],\r\n            [935, \"000000000000000000000000000000000000000000000000a703000000000000\"],\r\n            [936, \"000000000000000000000000000000000000000000000000a803000000000000\"],\r\n            [937, \"000000000000000000000000000000000000000000000000a903000000000000\"],\r\n            [938, \"000000000000000000000000000000000000000000000000aa03000000000000\"],\r\n            [939, \"000000000000000000000000000000000000000000000000ab03000000000000\"],\r\n            [940, \"000000000000000000000000000000000000000000000000ac03000000000000\"],\r\n            [941, \"000000000000000000000000000000000000000000000000ad03000000000000\"],\r\n            [942, \"000000000000000000000000000000000000000000000000ae03000000000000\"],\r\n            [943, \"000000000000000000000000000000000000000000000000af03000000000000\"],\r\n            [944, \"000000000000000000000000000000000000000000000000b003000000000000\"],\r\n            [945, \"000000000000000000000000000000000000000000000000b103000000000000\"],\r\n            [946, \"000000000000000000000000000000000000000000000000b203000000000000\"],\r\n            [947, \"000000000000000000000000000000000000000000000000b303000000000000\"],\r\n            [948, \"000000000000000000000000000000000000000000000000b403000000000000\"],\r\n            [949, \"000000000000000000000000000000000000000000000000b503000000000000\"],\r\n            [950, \"000000000000000000000000000000000000000000000000b603000000000000\"],\r\n            [951, \"000000000000000000000000000000000000000000000000b703000000000000\"],\r\n            [952, \"000000000000000000000000000000000000000000000000b803000000000000\"],\r\n            [953, \"000000000000000000000000000000000000000000000000b903000000000000\"],\r\n            [954, \"000000000000000000000000000000000000000000000000ba03000000000000\"],\r\n            [955, \"000000000000000000000000000000000000000000000000bb03000000000000\"],\r\n            [956, \"000000000000000000000000000000000000000000000000bc03000000000000\"],\r\n            [957, \"000000000000000000000000000000000000000000000000bd03000000000000\"],\r\n            [958, \"000000000000000000000000000000000000000000000000be03000000000000\"],\r\n            [959, \"000000000000000000000000000000000000000000000000bf03000000000000\"],\r\n            [960, \"000000000000000000000000000000000000000000000000c003000000000000\"],\r\n            [961, \"000000000000000000000000000000000000000000000000c103000000000000\"],\r\n            [962, \"000000000000000000000000000000000000000000000000c203000000000000\"],\r\n            [963, \"000000000000000000000000000000000000000000000000c303000000000000\"],\r\n            [964, \"000000000000000000000000000000000000000000000000c403000000000000\"],\r\n            [965, \"000000000000000000000000000000000000000000000000c503000000000000\"],\r\n            [966, \"000000000000000000000000000000000000000000000000c603000000000000\"],\r\n            [967, \"000000000000000000000000000000000000000000000000c703000000000000\"],\r\n            [968, \"000000000000000000000000000000000000000000000000c803000000000000\"],\r\n            [969, \"000000000000000000000000000000000000000000000000c903000000000000\"],\r\n            [970, \"000000000000000000000000000000000000000000000000ca03000000000000\"],\r\n            [971, \"000000000000000000000000000000000000000000000000cb03000000000000\"],\r\n            [972, \"000000000000000000000000000000000000000000000000cc03000000000000\"],\r\n            [973, \"000000000000000000000000000000000000000000000000cd03000000000000\"],\r\n            [974, \"000000000000000000000000000000000000000000000000ce03000000000000\"],\r\n            [975, \"000000000000000000000000000000000000000000000000cf03000000000000\"],\r\n            [976, \"000000000000000000000000000000000000000000000000d003000000000000\"],\r\n            [977, \"000000000000000000000000000000000000000000000000d103000000000000\"],\r\n            [978, \"000000000000000000000000000000000000000000000000d203000000000000\"],\r\n            [979, \"000000000000000000000000000000000000000000000000d303000000000000\"],\r\n            [980, \"000000000000000000000000000000000000000000000000d403000000000000\"],\r\n            [981, \"000000000000000000000000000000000000000000000000d503000000000000\"],\r\n            [982, \"000000000000000000000000000000000000000000000000d603000000000000\"],\r\n            [983, \"000000000000000000000000000000000000000000000000d703000000000000\"],\r\n            [984, \"000000000000000000000000000000000000000000000000d803000000000000\"],\r\n            [985, \"000000000000000000000000000000000000000000000000d903000000000000\"],\r\n            [986, \"000000000000000000000000000000000000000000000000da03000000000000\"],\r\n            [987, \"000000000000000000000000000000000000000000000000db03000000000000\"],\r\n            [988, \"000000000000000000000000000000000000000000000000dc03000000000000\"],\r\n            [989, \"000000000000000000000000000000000000000000000000dd03000000000000\"],\r\n            [990, \"000000000000000000000000000000000000000000000000de03000000000000\"],\r\n            [991, \"000000000000000000000000000000000000000000000000df03000000000000\"],\r\n            [992, \"000000000000000000000000000000000000000000000000e003000000000000\"],\r\n            [993, \"000000000000000000000000000000000000000000000000e103000000000000\"],\r\n            [994, \"000000000000000000000000000000000000000000000000e203000000000000\"],\r\n            [995, \"000000000000000000000000000000000000000000000000e303000000000000\"],\r\n            [996, \"000000000000000000000000000000000000000000000000e403000000000000\"],\r\n            [997, \"000000000000000000000000000000000000000000000000e503000000000000\"],\r\n            [998, \"000000000000000000000000000000000000000000000000e603000000000000\"],\r\n            [999, \"000000000000000000000000000000000000000000000000e703000000000000\"]\r\n        ]}\r\n    ]\r\n}"
    },
    "/inputs/nprime": {
        "name": "nprime",
        "type": "input",
        "path": "/inputs/nprime",
        "content": "{\r\n    \"operand_stack\": [\"50\"]\r\n}\r\n"
    },
    "/inputs/shamir_secret_share": {
        "name": "shamir_secret_share",
        "type": "input",
        "path": "/inputs/shamir_secret_share",
        "content": "{\r\n    \"operand_stack\": [\"3\", \"435956367654746\"],\r\n    \"advice_stack\": [\r\n        \"12345678\", \"10\"\r\n    ]\r\n}\r\n"
    },
    "/inputs/standard_library": {
        "name": "standard_library",
        "type": "input",
        "path": "/inputs/standard_library",
        "content": "{}"
    }
}