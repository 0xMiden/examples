# A program which computes the Discrete Fourier Transform (DFT) of the provided public inputs.
# We only allow input sizes of a power of 2 for convenience of computing the primitive root of unity.
# This program makes use of the fact that the modulus for the Miden VM's prime field is 2^64 - 2^32 + 1.
#
# See the corresponding Wikipedia article: https://en.wikipedia.org/wiki/Discrete_Fourier_transform_over_a_ring
#
# Expects the input stack to be
# Input: [<length of list>, <ele 0>, <ele 1>, ...]
# 
# Ouputs the Discrete Fourier Transform of the original list, which is a list of the same length.
# Output: [<ele 0'>, <ele 1'>, ...]
#
# Convention: inputs are always consumed by the callee

# Root of unity for domain of 2^32 elements, taken from Winterfell. See:
# https://github.com/facebook/winterfell/blob/4543689f73a2efb9d30927535de7b4efe7e1802d/math/src/field/f64/mod.rs#L270
const.TWO_ADIC_ROOT_OF_UNITY=7277203076849721926

# This means there's a multiplicative subgroup of size 2^32 that exists in the field.
# For more information about two-adicity, see https://cryptologie.net/article/559/whats-two-adicity/.
const.TWO_ADICITY=32

# Location where we will store the input array.
# [0, 2^30) is global memory, so we store it at the beginning.
const.INPUT_ARR_LOC=0

# Location at 3 * 2^30, the first address "with no special meaning" in the root context
const.RESULT_ARR_LOC=3221225472

#! Computes the primitive root of unity for a subgroup of size 2^n.
#!
#! Input: [n], the size of the input list (must be <= 32)
#! Output: [root_of_unity], where `root_of_unity` is the primitive root of unity of order 2^n
#!
#! Equivalent to Winterfell's implementation: 
#! https://github.com/facebook/winterfell/blob/4543689f73a2efb9d30927535de7b4efe7e1802d/math/src/field/traits.rs#L254-L259
proc.get_root_of_unity
    push.TWO_ADIC_ROOT_OF_UNITY.TWO_ADICITY     # stack: [TWO_ADICITY, TWO_ADIC_ROOT_OF_UNITY, n]
    movup.2                                     # stack: [n, TWO_ADICITY, TWO_ADIC_ROOT_OF_UNITY]
    sub                                         # stack: [TWO_ADICITY - n, TWO_ADIC_ROOT_OF_UNITY]
    pow2                                        # stack: [2^(TWO_ADICITY - n), TWO_ADIC_ROOT_OF_UNITY]
    exp                                         # stack: [TWO_ADIC_ROOT_OF_UNITY^(2^(TWO_ADICITY - n))]
end

#! Computes the kth element of the "frequency domain" (i.e. of the transformed list).
#!
#! Input: [k, root_of_unity, n, v_0, ..., v_{n-1}, ...]
#! Output: [f_k, ...]
#!
#! Locals
#! 0: k
#! 1: root_of_unity
#! 2: n (length of the list)
#! 3: j (counter)
#! 4: result (partial result of the computation)
proc.f_k.5
    loc_store.0                                # store k
    loc_store.1                                # store root_of_unity
    loc_store.2                                # store n

    # `j` and `result` are initialized to 0 by the VM

    # Stack here: [v0, ..., v{n-1}, ...]

    push.1                                     # push 1 to enter the loop
    while.true
        # compute `root_of_unity^(jk)`
        loc_load.1                             # load root_of_unity
        loc_load.0                             # load k
        loc_load.3                             # load j
        mul                                    # compute j*k
        exp                                    # compute root_of_unity^(jk)
        mul                                    # compute v{j} * root_of_unity^(jk)

        # update result
        loc_load.4                             # load result
        add                                    # sum previous partial result with v{j} * root_of_unity^(jk)
        loc_store.4                            # store partial result

        # Stack here: [v{j+1}, ..., v{n-1}, ...]

        # Update j
        loc_load.3                             # load j
        add.1                                  # increment j by 1
        dup                                    # dup before store to keep j+1 on stack
        loc_store.3                            # store j+1

        # Check if we're done looping
        loc_load.2                             # load n. stack: [n, j+1, ...]
        neq                                     # Check if j+1 != n; if so, we continue. Else, we're done.
    end

    # Return result
    loc_load.4                                 # load result
end

# Stores an array to `INPUT_ARR_LOC`, where an "array" is a list of elements prefixed by their length.
# The array is stored in the same order, that is [n, v0, ..., v{n-1}].
# The inverse operation is `proc.retrieve_array`.
# Input: [n, v0, ..., v{n-1}, ...]
# Output: [...]
proc.store_array
    # Store n
    dup
    mem_store.INPUT_ARR_LOC

    # Prepare stack for loop
    push.0.1                                  # pushes i=0, followed by 1 so that we enter the loop

    while.true
        # stack: [i, n, v{i}, ..., v{n-1}]

        # Setup write offset
        # Note: we write at location i + (INPUT_ARR_LOC + 1), since the element at INPUT_ARR_LOC is `n`
        # (i.e. the array starts at address `INPUT_ARR_LOC + 1`)
        movup.2                               # stack: [v{i}, i, n, v{i+1}, ..., v{n-1}]
        dup.1                                 # stack: [i, v{i}, i, n, v{i+1}, ..., v{n-1}]
        push.INPUT_ARR_LOC                          # stack: [INPUT_ARR_LOC, i, v{i}, i, n, v{i+1}, ..., v{n-1}]
        add.1                                 # stack: [INPUT_ARR_LOC+1, i, v{i}, i, n, v{i+1}, ..., v{n-1}]
        add                                   # stack: [i+INPUT_ARR_LOC+1, v{i}, i, n, v{i+1}, ..., v{n-1}]

        # Write v{i}
        mem_store                             # stack: [i, n, v{i+1}, ..., v{n-1}]

        # Increment i and check if we're done
        add.1                                 # stack: [i+1, n, v{i+1}, ..., v{n-1}]
        dup.1                                 # stack: [n, i+1, n, v{i+1}, ..., v{n-1}]
        dup.1                                 # stack: [i+1, n, i+1, n, v{i+1}, ..., v{n-1}]
        neq                                   # stack: [1 or 0, i+1, n, v{i+1}, ..., v{n-1}]
    end

    # stack: [n, n, ...]
    drop                                      # stack: [n, ...]
    drop                                      # stack: [...]
end

#! Retrieves an array previously stored with `proc.store_array`.
#! Input: [array_loc], the memory location to retrieve the array
#! Output: [n, v0, ..., v{n-1}]
#!
#! Locals
#! 0: array_loc
proc.retrieve_array.1
    dup                                       # stack: [array_loc, array_loc, ...]
    loc_store.0                               # stack: [array_loc, ...]
    mem_load                                  # stack: [n, ...]

    # Prepare stack for loop
    push.0.1                                  # pushes i=0, followed by 1 so that we enter the loop

    while.true
        # stack: [i, n, v{i}, ..., v{n-1}]

        # Setup read offset
        # Note: we read at location `array_loc + n - i`, since the element at array_loc is `n`
        # (i.e. the array starts at address `array_loc + 1`)
        dup.1                                   # stack: [n, i, n, v{i+1}, ..., v{n-1}]
        dup.1                                   # stack: [i, n, i, n, v{i+1}, ..., v{n-1}]
        sub                                     # stack: [n - i, i, n, v{i+1}, ..., v{n-1}]
        loc_load.0                              # stack: [array_loc, n - i, i, n, v{i+1}, ..., v{n-1}]
        add                                     # stack: [array_loc + n - i, i, n, v{i+1}, ..., v{n-1}]

        # Read v{i} and put in its spot on the stack
        mem_load                                # stack: [v{i}, i, n, v{i+1}, ..., v{n-1}]
        movdn.2                                 # stack: [i, n, v{i}, v{i+1}, ..., v{n-1}]

        # Increment i and check if we're done
        add.1                                 # stack: [i+1, n, v{i}, v{i+1}, ..., v{n-1}]
        dup.1                                 # stack: [n, i+1, n, v{i}, v{i+1}, ..., v{n-1}]
        dup.1                                 # stack: [i+1, n, i+1, n, v{i}, v{i+1}, ..., v{n-1}]
        neq                                   # stack: [1 or 0, i+1, n, v{i}, v{i+1}, ..., v{n-1}]
    end

    # stack: [n, n, v0, ..., v{n-1}]

    drop                                      # stack: [n, v0, ..., v{n-1}]
end

#! Input: [n, v0, ..., v{n-1}]
#!
#! Locals
#! 0: n
#! 1: root_of_unity
#! 2: k
proc.main.3
    # Initialize memory
    # Note: k is initialized to 0 by the VM
    dup                                      # stack: [n, n, v0, ..., v{n-1}]
    loc_store.0                              # stack: [n, v0, ..., v{n-1}]
    dup                                      # stack: [n, n, v0, ..., v{n-1}]
    mem_store.RESULT_ARR_LOC                 # stack: [n, v0, ..., v{n-1}]
    dup                                      # stack: [n, n, v0, ..., v{n-1}]
    exec.get_root_of_unity                   # stack: [root_of_unity, n v0, ..., v{n-1}]
    loc_store.1                              # stack: [n, v0, ..., v{n-1}]
    exec.store_array                         # stack: []

    # Prepare stack for loop
    push.1                                 # push 1 so that we enter the loop

    while.true
        # prepare call to `proc.f_k`
        push.INPUT_ARR_LOC                         # stack: [INPUT_ARR_LOC]
        exec.retrieve_array                  # stack: [n, v0, ..., v{n-1}]
        loc_load.1                           # stack: [root_of_unity, n, v0, ..., v{n-1}]
        loc_load.2                           # stack: [k, root_of_unity, n, v0, ..., v{n-1}]

        # call `proc.f_k`
        exec.f_k                             # stack: [f_k]

        # Store `f_k` at `RESULT_ARR_LOC + k + 1`
        push.RESULT_ARR_LOC                  # stack: [RESULT_ARR_LOC, f_k]
        loc_load.2                           # stack: [k, RESULT_ARR_LOC, f_k]
        add                                  # stack: [RESULT_ARR_LOC + k, f_k]
        add.1                                # stack: [RESULT_ARR_LOC + k + 1, f_k]
        mem_store                            # stack: []

        # Load, increment k, and store 
        loc_load.2                            # stack: [k]
        add.1                                 # stack: [k+1]
        dup                                   # stack: [k+1, k+1]
        loc_store.2                           # stack: [k+1]

        # Check if we're done
        loc_load.0                            # stack: [n, k+1]
        neq                                   # stack: [1 or 0]
    end

    # stack: []

    push.RESULT_ARR_LOC                       # stack: [RESULT_ARR_LOC]
    exec.retrieve_array                       # stack: [n, f0, ..., f{n-1}]
    drop                                      # stack: [f0, ..., f{n-1}]
end

begin
    exec.main
end